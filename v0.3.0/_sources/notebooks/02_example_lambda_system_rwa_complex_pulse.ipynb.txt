{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Optimization of a state-to-state transfer in a lambda system with RWA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:40:55.751470Z",
     "start_time": "2019-02-12T04:40:52.635450Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "1"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "qutip            4.3.1\n",
      "krotov           0.3.0\n",
      "matplotlib       3.0.3\n",
      "scipy            1.2.1\n",
      "numpy            1.15.4\n",
      "matplotlib.pylab 1.15.4\n",
      "CPython 3.6.8\n",
      "IPython 7.3.0\n"
     ]
    }
   ],
   "source": [
    "# NBVAL_IGNORE_OUTPUT\n",
    "%load_ext watermark\n",
    "import numpy as np\n",
    "import scipy\n",
    "import matplotlib\n",
    "import matplotlib.pylab as plt\n",
    "import krotov\n",
    "import qutip\n",
    "from qutip import Qobj\n",
    "%watermark -v --iversions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\newcommand{tr}[0]{\\operatorname{tr}}\n",
    "\\newcommand{diag}[0]{\\operatorname{diag}}\n",
    "\\newcommand{abs}[0]{\\operatorname{abs}}\n",
    "\\newcommand{pop}[0]{\\operatorname{pop}}\n",
    "\\newcommand{aux}[0]{\\text{aux}}\n",
    "\\newcommand{opt}[0]{\\text{opt}}\n",
    "\\newcommand{tgt}[0]{\\text{tgt}}\n",
    "\\newcommand{init}[0]{\\text{init}}\n",
    "\\newcommand{lab}[0]{\\text{lab}}\n",
    "\\newcommand{rwa}[0]{\\text{rwa}}\n",
    "\\newcommand{bra}[1]{\\langle#1\\vert}\n",
    "\\newcommand{ket}[1]{\\vert#1\\rangle}\n",
    "\\newcommand{Bra}[1]{\\left\\langle#1\\right\\vert}\n",
    "\\newcommand{Ket}[1]{\\left\\vert#1\\right\\rangle}\n",
    "\\newcommand{Braket}[2]{\\left\\langle #1\\vphantom{#2} \\mid\n",
    "#2\\vphantom{#1}\\right\\rangle}\n",
    "\\newcommand{Ketbra}[2]{\\left\\vert#1\\vphantom{#2}\n",
    "\\right\\rangle \\hspace{-0.2em} \\left\\langle #2\\vphantom{#1}\\right\\vert}\n",
    "\\newcommand{op}[1]{\\hat{#1}}\n",
    "\\newcommand{Op}[1]{\\hat{#1}}\n",
    "\\newcommand{dd}[0]{\\,\\text{d}}\n",
    "\\newcommand{Liouville}[0]{\\mathcal{L}}\n",
    "\\newcommand{DynMap}[0]{\\mathcal{E}}\n",
    "\\newcommand{identity}[0]{\\mathbf{1}}\n",
    "\\newcommand{Norm}[1]{\\lVert#1\\rVert}\n",
    "\\newcommand{Abs}[1]{\\left\\vert#1\\right\\vert}\n",
    "\\newcommand{avg}[1]{\\langle#1\\rangle}\n",
    "\\newcommand{Avg}[1]{\\left\\langle#1\\right\\rangle}\n",
    "\\newcommand{AbsSq}[1]{\\left\\vert#1\\right\\vert^2}\n",
    "\\newcommand{Re}[0]{\\operatorname{Re}}\n",
    "\\newcommand{Im}[0]{\\operatorname{Im}}\n",
    "\\newcommand{toP}[0]{\\omega_{12}}\n",
    "\\newcommand{toS}[0]{\\omega_{23}}\n",
    "\\newcommand{oft}[0]{\\left(t\\right)}$\n",
    "\n",
    "The purpose of this example is to illustrate and test the use of complex control\n",
    "fields.\n",
    "Essentially, this is accomplished by rewriting the Hamiltonian as the\n",
    "sum of two independent controls (real and imaginary parts).\n",
    "\n",
    "## Define the Hamiltonian\n",
    "\n",
    "The system consists of three levels $\\Ket{1}$,\n",
    "$\\Ket{2}$ and $\\Ket{3}$ with energy levels $E_{1}, E_{2}$ and $E_{3}$ which\n",
    "interact with a pair of pulses,\n",
    "with central frequencies of\n",
    "$\\omega_{P}$ (pump laser) and \n",
    "$\\omega_{S}$\n",
    "(stokes laser) respectively.\n",
    "The pulses each have time-dependent envelopes\n",
    "$\\varepsilon_{P}\\oft =\\frac{\\Omega_{P}^{(1)}\\oft}{\\mu_{12}}  \\cos{(\\omega_P t)} - \\frac{\\Omega_{P}^{(2)}\\oft}{\\mu_{12}} \\sin{(\\omega_P t)}$ and \n",
    "$\\varepsilon_{S}\\oft = \\frac{\\Omega_{S}^{(1)}\\oft}{\\mu_{23}} \\cos{(\\omega_S t)} - \\frac{\\Omega_{S}^{(2)}\\oft}{\\mu_{23}} \\sin{(\\omega_S t)}$, where $\\mu_{ij}$ are the $ij^{\\text{th}}$ dipole-transition moment.\n",
    "Furthermore, it is assumed that\n",
    "the frequencies are tuned\n",
    "such that $\\omega_{P}$ selectively\n",
    "addresses\n",
    "the $\\Ket{1} \\leftrightarrow \\Ket{2}$ and \n",
    "$\\omega_{S}$\n",
    "addresses the $\\Ket{2} \\leftrightarrow \\Ket{3}$ transition.\n",
    "\n",
    "We transform into\n",
    "the interaction picture via\n",
    "\n",
    "$$\\op{H}_{\\text{RWA}}  = \\op{U}_{0}^{-1} \\op{H}_{\\text{lab}} \\op{U}_{0}  - i \\op{U}_{0}^{-1} \\dot{\\op{U}}_{0}$$\n",
    "\n",
    "using the operator\n",
    "\n",
    "$$\\op{U}_{0} = \\Ketbra{1}{1}\n",
    "e^{-i\\left(E_{2} - \\omega_{P} \\right)t} + \\Ketbra{2}{2} e^{-iE_{2}t} +\n",
    "\\Ketbra{3}{3} e^{-i\\left(E_{2}-\\omega_{S}\\right)t}\\,\\,,$$\n",
    "\n",
    "where $\\toP$ and\n",
    "$\\toS$, the splittings between the first and second and between the second and\n",
    "third energy levels, are close to the central frequencies of $\\omega_{S}$\n",
    "and $\\omega_{P}$.\n",
    "From now on the subscript RWA for operators in the rotating frame is omitted.\n",
    "\n",
    "In the rotating wave approximation, the fast rotating\n",
    "terms\n",
    "$e^{\\pm i2\\omega_{P} t}$ and \n",
    "$e^{\\pm i2\\omega_{S} t}$ can be neglegted.\n",
    "The resulting pulses which are optimized in the rotating frame therefore appear as complex.\n",
    " \n",
    "Consequently,\n",
    "\n",
    "$$ \\op{H}_{0} =\n",
    "\\Delta_{P} \\Ketbra{1}{1}  +\\Delta_{S} \\Ketbra{3}{3}$$\n",
    "\n",
    "describes the drift\n",
    "Hamiltonian of a system with the respective detunings $\\Delta_{P}=E_{1} +\n",
    "\\omega_{P} - E_{2}$ and $\\Delta_{S} = E_{3} + \\omega_{S} -E_{2}$.\n",
    "\n",
    "The control\n",
    "Hamiltonian is given by \n",
    "\n",
    "$$    \\op{H}_{1}\\oft = \\op{H}_{1,P}\\oft +\n",
    "\\op{H}_{1,S}\\oft = -\\frac{1}{2} \\Omega_{P}\\oft \\Ketbra{1}{2} -\\frac{1}{2} \\Omega_{S}\\oft\\Ketbra{2}{3} +\n",
    "\\text{h.c.}\\,\\,,$$\n",
    "\n",
    "where $\\Omega_{P}\\oft =  \\Omega_{P}^{(1)}\\oft + i\\Omega_{P}^{(2)}\\oft$ and \n",
    "$\\Omega_{S}\\oft = \\Omega_{S}^{(1)}\\oft + i\\Omega_{S}^{(2)}\\oft$.\n",
    "The real and imaginary parts of $\\Omega_{P}$ and $\\Omega_{S}$ are optimized separately as if they were independent real pulses.\n",
    "\n",
    "\n",
    "## About the target transformation in the RWA\n",
    "\n",
    "Since we are working in the interaction picture with the RWA we have to convert\n",
    "the states from the lab frame to the rotating frame. This is made by \n",
    "following the next equation \n",
    "\n",
    "$$ \\ket{\\psi _{I}} = \\op{U}_{0} ^{-1}\\ket{\\psi}, $$\n",
    "\n",
    "with $\\op{U}_0$ the free evolution operator defined before. \n",
    "\n",
    "The initial states are defined at $t = 0$ and thus they remain the same in the \n",
    "rotating frame, but the target states may change. In our example, the \n",
    "target state is an eigenstate, and thus in the RWA frame it will be the same, \n",
    "except for a phase. That phase will be important when using `J_T_re` as a functional. \n",
    "\n",
    "In any other problems in which the relative phase of the final states is also important, \n",
    "this step should be taken into account before defining the objectives for the optimization. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:40:55.781057Z",
     "start_time": "2019-02-12T04:40:55.755916Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "2"
    }
   },
   "outputs": [],
   "source": [
    "T = 5.\n",
    "\n",
    "def ham_and_states():\n",
    "    \"\"\"Lambda-system Hamiltonian\"\"\"\n",
    "    E1 = 0.\n",
    "    E2 = 10.\n",
    "    E3 = 5.\n",
    "    ω_P = 9.5\n",
    "    ω_S = 4.5\n",
    "    Ω_init = 5.\n",
    "    H0 =  Qobj([[E1+ω_P-E2, 0., 0.], \\\n",
    "                [0., 0., 0.],        \\\n",
    "                [0., 0., E3+ω_S-E2]])\n",
    "    \n",
    "        \n",
    "    H1P_re = -0.5*Qobj([[0.,1.,0.], [1.,0.,0.],[0.,0.,0.]])    \n",
    "    H1P_im = -0.5*Qobj([[0.,1.j,0.],[-1.j,0.,0.],[0.,0.,0.]])\n",
    "    ΩP_re = lambda t, args: Ω_init\n",
    "    ΩP_im = lambda t, args: Ω_init\n",
    "    \n",
    "    H1S_re = -0.5*Qobj([[0.,0.,0.],[0.,0.,1.],[0.,1.,0.]])\n",
    "    H1S_im = -0.5*Qobj([[0.,0.,0.],[0.,0.,1.j],[0.,-1.j,0.]])\n",
    "    ΩS_re = lambda t, args: Ω_init    \n",
    "    ΩS_im = lambda t, args: Ω_init\n",
    "    \n",
    "    \"\"\"Initial and target states\"\"\"\n",
    "    psi0 = qutip.Qobj(np.array([1.,0.,0.]))\n",
    "    psi1 = qutip.Qobj(np.array([0.,0.,1.]))    \n",
    "    \n",
    "    #State transformation to the rotating frame\n",
    "    psi1 *= np.exp(1j * (E2 - ω_S) * T)\n",
    "    \n",
    "    return ([H0, \\\n",
    "            [H1P_re, ΩP_re], [H1P_im, ΩP_im], \\\n",
    "            [H1S_re, ΩS_re], [H1S_im, ΩS_im]], \\\n",
    "            psi0, psi1)\n",
    "\n",
    "H, psi0, psi1 = ham_and_states()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We introduce projectors for each of the three energy levels\n",
    "$\\op{P}_{i} =\n",
    "\\Ketbra{i}{i}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:40:55.798666Z",
     "start_time": "2019-02-12T04:40:55.787265Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "3"
    }
   },
   "outputs": [],
   "source": [
    "proj1 = Qobj([[1.,0.,0.],[0.,0.,0.],[0.,0.,0.]])\n",
    "proj2 = Qobj([[0.,0.,0.],[0.,1.,0.],[0.,0.,0.]])\n",
    "proj3 = Qobj([[0.,0.,0.],[0.,0.,0.],[0.,0.,1.]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define the optimization target\n",
    "\n",
    "In the following we consider dynamics acting\n",
    "over a duration of $\\Delta_{t} = 5$, beginning at\n",
    "$t_{0} = 0$ and ending at $T =\n",
    "\\Delta_{t}$. \n",
    "The time grid is divided into $n_{t} = 500$ equidistant time\n",
    "steps."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:40:55.809020Z",
     "start_time": "2019-02-12T04:40:55.802160Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "4"
    }
   },
   "outputs": [],
   "source": [
    "tlist = np.linspace(0.,T,500)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since the objective of this example is a state to state transfer from the\n",
    "initial state\n",
    "$\\Ket{\\Psi_{\\init}} = \\Ket{1}$ into the final state\n",
    "$\\Ket{\\Psi_{\\tgt}} = \\Ket{3}$ at the\n",
    "final time $t_{1}$, the optimization\n",
    "objective is set as"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:40:55.816607Z",
     "start_time": "2019-02-12T04:40:55.813293Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "5"
    }
   },
   "outputs": [],
   "source": [
    "objective = krotov.Objective(initial_state=psi0, target=psi1, H=H)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initial guess shapes\n",
    "\"stimulated Raman adiabatic passage\" (STIRAP) is a\n",
    "process in which population in $\\Ket{1}$ is transferred into\n",
    "$\\Ket{3}$ without\n",
    "having to pass through $\\Ket{2}$ (which could for instance be a rapidly decaying\n",
    "level).\n",
    "In order for this process to occur, a temporally finite Stokes pulse of\n",
    "sufficient amplitude driving the $\\Ket{2} \\leftrightarrow \\Ket{3}$ transition is\n",
    "applied first, whilst second pump pulse of similar intensity follows some time\n",
    "later such that the pulses still have a partial temporal overlap.\n",
    "\n",
    "In order to\n",
    "demonstrate the Krotov's optimization method however, we choose an initial guess\n",
    "consisting of two low intensity and real Blackman pulses which are temporally\n",
    "disjoint.\n",
    "\n",
    "For the real components of the matrix elements, we supply our guess\n",
    "pulses shaped as Blackman window functions `S(t,offset)`, with an offset\n",
    "ensuring that the two pulses don't overlap.\n",
    "The imaginary components are coupled\n",
    "to pulses that are zero at all times."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:40:55.829336Z",
     "start_time": "2019-02-12T04:40:55.819110Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "6"
    }
   },
   "outputs": [],
   "source": [
    "def S(t,offset):\n",
    "    \"\"\"Shape envelope function for the field update\"\"\"\n",
    "    return krotov.shapes.blackman(t,1.+offset,4.+offset)\n",
    "\n",
    "def shape_field_real(eps,offset):\n",
    "    \"\"\"Applies the total pulse shape to the real part of a guess pulse\"\"\"\n",
    "    field_shaped = lambda t, args: eps(t, args)*S(t,offset)\n",
    "    return field_shaped\n",
    "\n",
    "def shape_field_imag(eps,offset):\n",
    "    \"\"\"Initializes the imaginary parts of the guess pulses to zero\"\"\"\n",
    "    field_shaped = lambda t, args: eps(t, args)*0.\n",
    "    return field_shaped\n",
    "\n",
    "H[1][1] = shape_field_real(H[1][1],1.) # Re[Ωₚ]\n",
    "H[2][1] = shape_field_imag(H[2][1],1.) # Im[Ωₚ]\n",
    "H[3][1] = shape_field_real(H[3][1],-1.) # Re[Ωₛ]\n",
    "H[4][1] = shape_field_imag(H[4][1],-1.) # Im[Ωₛ]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We choose an appropriate update factor $\\lambda_{a}$ for the problem at hand and\n",
    "make sure Krotov considers pulses which start and end with zero amplitude."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:40:55.839565Z",
     "start_time": "2019-02-12T04:40:55.833234Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "7"
    }
   },
   "outputs": [],
   "source": [
    "def update_shape(t):\n",
    "    \"\"\"Scales the Krotov methods update of the pulse value at the time t\"\"\"\n",
    "    return krotov.shapes.flattop(t,0.,5.,0.3,func='sinsq')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:40:55.851044Z",
     "start_time": "2019-02-12T04:40:55.842793Z"
    }
   },
   "outputs": [],
   "source": [
    "opt_lambda = 2.\n",
    "pulse_options = { \n",
    "    H[1][1]: dict(lambda_a=opt_lambda, shape=update_shape),\n",
    "    H[2][1]: dict(lambda_a=opt_lambda, shape=update_shape),\n",
    "    H[3][1]: dict(lambda_a=opt_lambda, shape=update_shape),\n",
    "    H[4][1]: dict(lambda_a=opt_lambda, shape=update_shape)\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulate dynamics of the guess field"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:40:55.858312Z",
     "start_time": "2019-02-12T04:40:55.853316Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "10"
    }
   },
   "outputs": [],
   "source": [
    "def plot_pulse(pulse, tlist, label):\n",
    "    fig, ax = plt.subplots()\n",
    "    if callable(pulse):\n",
    "        pulse = np.array([pulse(t, args=None) for t in tlist])\n",
    "    ax.plot(tlist, pulse)\n",
    "    ax.set_xlabel('time')\n",
    "    ax.set_ylabel('%s pulse amplitude' % label)\n",
    "    plt.show(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:40:56.293915Z",
     "start_time": "2019-02-12T04:40:55.860421Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "11"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_pulse(H[1][1], tlist, 'Ωₚ')\n",
    "plot_pulse(H[3][1], tlist, 'Ωₛ')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The imaginary parts are zero:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:40:56.300681Z",
     "start_time": "2019-02-12T04:40:56.295922Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "12"
    }
   },
   "outputs": [],
   "source": [
    "assert np.all([H[2][1](t, None) == 0 for t in tlist])\n",
    "assert np.all([H[4][1](t, None) == 0 for t in tlist])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After assuring ourselves that our guess pulses appear as expected, we propagate\n",
    "the system using our guess. Since the pulses are temporally disjoint, we expect\n",
    "the first pulse to have no effect, whilst the second merely transfers population\n",
    "out of $\\Ket{1}$ into $\\Ket{2}$ and back again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:40:57.224259Z",
     "start_time": "2019-02-12T04:40:56.304263Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "13"
    }
   },
   "outputs": [],
   "source": [
    "guess_dynamics = objective.mesolve(tlist, e_ops=[proj1,proj2,proj3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:40:57.232092Z",
     "start_time": "2019-02-12T04:40:57.226227Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "14"
    }
   },
   "outputs": [],
   "source": [
    "def plot_population(result):\n",
    "    fig, ax = plt.subplots()\n",
    "    ax.plot(result.times, result.expect[0], label='1')\n",
    "    ax.plot(result.times, result.expect[1], label='2')\n",
    "    ax.plot(result.times, result.expect[2], label='3')\n",
    "    ax.legend()\n",
    "    ax.set_xlabel('time')\n",
    "    ax.set_ylabel('population')\n",
    "    plt.show(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:40:57.443794Z",
     "start_time": "2019-02-12T04:40:57.236490Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "15"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_population(guess_dynamics)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimize\n",
    "We now supply Krotov with all the information it needs to optimize,\n",
    "consisting of the `objectives` (maximize population in $\\Ket{3}$ at $t_{1}$),\n",
    "`pulse_options` (the initial shapes of our pulses and how they may be changed)\n",
    "as well as the `propagator` to use, optimization functional (`chi_constructor`),\n",
    "`info_hook` (processing occuring inbetween iterations of optimization) and the\n",
    "maximum number of iterations to perform, `iter_stop`. We will stop the\n",
    "optimization when the error goes below $10^{-3}$ or the fidelity has converged\n",
    "to within 5 digits."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:41:22.349155Z",
     "start_time": "2019-02-12T04:40:57.446355Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "16"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  iter.        J_T   g_a_int_1   g_a_int_2   g_a_int_3   g_a_int_4     g_a_int          J  Delta_J_T    Delta J  secs\n",
      "      0   1.01e+00    0.00e+00    0.00e+00    0.00e+00    0.00e+00    0.00e+00   1.01e+00        n/a        n/a     1\n",
      "      1   9.21e-01    1.09e-02    3.62e-05    1.08e-02    3.96e-05    2.18e-02   9.43e-01  -8.71e-02  -6.53e-02     2\n",
      "      2   8.35e-01    1.08e-02    3.98e-05    1.07e-02    4.33e-05    2.15e-02   8.57e-01  -8.60e-02  -6.45e-02     2\n",
      "      3   7.52e-01    1.05e-02    4.34e-05    1.03e-02    4.68e-05    2.09e-02   7.73e-01  -8.36e-02  -6.27e-02     2\n",
      "      4   6.72e-01    1.01e-02    4.69e-05    9.84e-03    5.00e-05    2.00e-02   6.92e-01  -8.01e-02  -6.01e-02     2\n",
      "      5   5.96e-01    9.54e-03    4.98e-05    9.26e-03    5.27e-05    1.89e-02   6.15e-01  -7.56e-02  -5.67e-02     2\n",
      "      6   5.25e-01    8.91e-03    5.21e-05    8.60e-03    5.46e-05    1.76e-02   5.43e-01  -7.05e-02  -5.29e-02     2\n",
      "      7   4.61e-01    8.22e-03    5.36e-05    7.89e-03    5.57e-05    1.62e-02   4.77e-01  -6.49e-02  -4.87e-02     2\n",
      "      8   4.02e-01    7.49e-03    5.41e-05    7.16e-03    5.60e-05    1.48e-02   4.16e-01  -5.91e-02  -4.43e-02     2\n",
      "      9   3.48e-01    6.76e-03    5.38e-05    6.43e-03    5.53e-05    1.33e-02   3.62e-01  -5.32e-02  -3.99e-02     2\n",
      "     10   3.01e-01    6.04e-03    5.26e-05    5.72e-03    5.39e-05    1.19e-02   3.13e-01  -4.75e-02  -3.56e-02     2\n",
      "     11   2.59e-01    5.34e-03    5.07e-05    5.05e-03    5.18e-05    1.05e-02   2.69e-01  -4.20e-02  -3.15e-02     2\n",
      "     12   2.22e-01    4.70e-03    4.82e-05    4.42e-03    4.93e-05    9.22e-03   2.31e-01  -3.69e-02  -2.77e-02     2\n",
      "     13   1.90e-01    4.10e-03    4.53e-05    3.85e-03    4.63e-05    8.04e-03   1.98e-01  -3.22e-02  -2.41e-02     2\n",
      "     14   1.62e-01    3.56e-03    4.22e-05    3.34e-03    4.31e-05    6.98e-03   1.69e-01  -2.79e-02  -2.09e-02     2\n",
      "     15   1.38e-01    3.07e-03    3.89e-05    2.88e-03    3.98e-05    6.03e-03   1.44e-01  -2.41e-02  -1.81e-02     2\n"
     ]
    }
   ],
   "source": [
    "oct_result = krotov.optimize_pulses(\n",
    "    [objective],\n",
    "    pulse_options,\n",
    "    tlist,\n",
    "    propagator=krotov.propagators.expm,\n",
    "    chi_constructor=krotov.functionals.chis_re,\n",
    "    info_hook=krotov.info_hooks.print_table(\n",
    "        J_T=krotov.functionals.J_T_re,\n",
    "        show_g_a_int_per_pulse=True,\n",
    "        unicode=False,\n",
    "    ),\n",
    "    check_convergence=krotov.convergence.Or(\n",
    "        krotov.convergence.value_below(1e-3, name='J_T'),\n",
    "        krotov.convergence.delta_below(1e-5),\n",
    "        krotov.convergence.check_monotonic_error,\n",
    "    ),\n",
    "    iter_stop=15,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:41:22.361922Z",
     "start_time": "2019-02-12T04:41:22.354011Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "17"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Krotov Optimization Result\n",
       "--------------------------\n",
       "- Started at 2019-03-01 01:46:52\n",
       "- Number of objectives: 1\n",
       "- Number of iterations: 15\n",
       "- Reason for termination: Reached 15 iterations\n",
       "- Ended at 2019-03-01 01:47:27"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oct_result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We appear to have found pulse-shapes that fulfill our objective, but what do\n",
    "they look like?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:41:22.898498Z",
     "start_time": "2019-02-12T04:41:22.365141Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "18"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pump pulse amplitude and phase:\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stokes pulse amplitude and phase:\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_pulse_amplitude_and_phase(pulse_real, pulse_imaginary,tlist):\n",
    "    ax1 = plt.subplot(211)\n",
    "    ax2 = plt.subplot(212)\n",
    "    amplitudes = [np.sqrt(x*x + y*y) for x,y in zip(pulse_real,pulse_imaginary)]\n",
    "    phases = [np.arctan2(y,x)/np.pi for x,y in zip(pulse_real,pulse_imaginary)]\n",
    "    ax1.plot(tlist,amplitudes)\n",
    "    ax1.set_xlabel('time')\n",
    "    ax1.set_ylabel('pulse amplitude')\n",
    "    ax2.plot(tlist,phases)\n",
    "    ax2.set_xlabel('time')\n",
    "    ax2.set_ylabel('pulse phase (π)')    \n",
    "    plt.show()\n",
    "    \n",
    "print(\"pump pulse amplitude and phase:\")\n",
    "plot_pulse_amplitude_and_phase(\n",
    "    oct_result.optimized_controls[0], oct_result.optimized_controls[1], tlist)\n",
    "print(\"Stokes pulse amplitude and phase:\")\n",
    "plot_pulse_amplitude_and_phase(\n",
    "    oct_result.optimized_controls[2], oct_result.optimized_controls[3], tlist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once we have the optimized real and imaginary parts of the $\\Omega_P (t)$ and $\\Omega_P (t)$ functions we can retrieve the physical pulses $\\varepsilon _P (t)$ and $\\varepsilon _S (t)$ using their very definition. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Physical electric pump pulse in the lab frame:\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Physical electric Stokes pulse in the lab frame:\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_physical_field(pulse_re, pulse_im, tlist, case=None):\n",
    "\n",
    "    if case == 'pump':\n",
    "        w = 9.5\n",
    "    elif case == 'stokes':\n",
    "        w = 4.5\n",
    "    else: \n",
    "        print('Error: selected case is not a valid option')\n",
    "        return\n",
    "    \n",
    "    ax = plt.subplot(111)    \n",
    "    ax.plot(tlist,pulse_re*np.cos(w*tlist)-pulse_im*np.sin(w*tlist), 'r')\n",
    "    ax.set_xlabel('time', fontsize = 16)\n",
    "    if case == 'pump':\n",
    "        ax.set_ylabel(r'$\\varepsilon_{P} * \\mu_{12}$', fontsize = 16)\n",
    "    elif case == 'stokes':\n",
    "        ax.set_ylabel(r'$\\varepsilon_{S} * \\mu_{23}$', fontsize = 16)\n",
    "    plt.show()\n",
    "    \n",
    "print('Physical electric pump pulse in the lab frame:')\n",
    "plot_physical_field(\n",
    "    oct_result.optimized_controls[0], oct_result.optimized_controls[1], tlist, case = 'pump')\n",
    "\n",
    "\n",
    "print('Physical electric Stokes pulse in the lab frame:')\n",
    "plot_physical_field(\n",
    "    oct_result.optimized_controls[2], oct_result.optimized_controls[3], tlist, case = 'stokes')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And how does the population end up in $\\Ket{3}$?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:41:23.628149Z",
     "start_time": "2019-02-12T04:41:22.905901Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "19"
    }
   },
   "outputs": [],
   "source": [
    "opt_dynamics = oct_result.optimized_objectives[0].mesolve(\n",
    "    tlist, e_ops=[proj1, proj2, proj3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:41:23.853468Z",
     "start_time": "2019-02-12T04:41:23.633866Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "20"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_population(opt_dynamics)"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "jupytext": {
   "main_language": "python",
   "text_representation": {
    "extension": ".md",
    "format_name": "markdown",
    "format_version": "1.0",
    "jupytext_version": "0.8.6"
   }
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
