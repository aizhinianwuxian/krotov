{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Optimization of Dissipative Qubit Reset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.374878Z",
     "start_time": "2019-02-12T04:47:25.200533Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "1"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "numpy            1.15.4\n",
      "matplotlib.pylab 1.15.4\n",
      "scipy            1.2.1\n",
      "qutip            4.3.1\n",
      "krotov           0.3.0\n",
      "matplotlib       3.0.3\n",
      "CPython 3.6.8\n",
      "IPython 7.3.0\n"
     ]
    }
   ],
   "source": [
    "# NBVAL_IGNORE_OUTPUT\n",
    "%load_ext watermark\n",
    "import qutip\n",
    "import numpy as np\n",
    "import scipy\n",
    "import matplotlib\n",
    "import matplotlib.pylab as plt\n",
    "import krotov\n",
    "%watermark -v --iversions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\newcommand{tr}[0]{\\operatorname{tr}}\n",
    "\\newcommand{diag}[0]{\\operatorname{diag}}\n",
    "\\newcommand{abs}[0]{\\operatorname{abs}}\n",
    "\\newcommand{pop}[0]{\\operatorname{pop}}\n",
    "\\newcommand{aux}[0]{\\text{aux}}\n",
    "\\newcommand{int}[0]{\\text{int}}\n",
    "\\newcommand{opt}[0]{\\text{opt}}\n",
    "\\newcommand{tgt}[0]{\\text{tgt}}\n",
    "\\newcommand{init}[0]{\\text{init}}\n",
    "\\newcommand{lab}[0]{\\text{lab}}\n",
    "\\newcommand{rwa}[0]{\\text{rwa}}\n",
    "\\newcommand{bra}[1]{\\langle#1\\vert}\n",
    "\\newcommand{ket}[1]{\\vert#1\\rangle}\n",
    "\\newcommand{Bra}[1]{\\left\\langle#1\\right\\vert}\n",
    "\\newcommand{Ket}[1]{\\left\\vert#1\\right\\rangle}\n",
    "\\newcommand{Braket}[2]{\\left\\langle #1\\vphantom{#2} \\mid\n",
    "#2\\vphantom{#1}\\right\\rangle}\n",
    "\\newcommand{op}[1]{\\hat{#1}}\n",
    "\\newcommand{Op}[1]{\\hat{#1}}\n",
    "\\newcommand{dd}[0]{\\,\\text{d}}\n",
    "\\newcommand{Liouville}[0]{\\mathcal{L}}\n",
    "\\newcommand{DynMap}[0]{\\mathcal{E}}\n",
    "\\newcommand{identity}[0]{\\mathbf{1}}\n",
    "\\newcommand{Norm}[1]{\\lVert#1\\rVert}\n",
    "\\newcommand{Abs}[1]{\\left\\vert#1\\right\\vert}\n",
    "\\newcommand{avg}[1]{\\langle#1\\rangle}\n",
    "\\newcommand{Avg}[1]{\\left\\langle#1\\right\\rangle}\n",
    "\\newcommand{AbsSq}[1]{\\left\\vert#1\\right\\vert^2}\n",
    "\\newcommand{Re}[0]{\\operatorname{Re}}\n",
    "\\newcommand{Im}[0]{\\operatorname{Im}}$\n",
    "This example provides an example for an optimization in an open quantum system,\n",
    "where the dynamics is governed by the Liouville-von Neumann equation. Hence,\n",
    "states are represented by density matrices $\\op{\\rho}(t)$ and the time-evolution\n",
    "operator is given by a general dynamical map $\\DynMap$.\n",
    "\n",
    "## Define parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.385786Z",
     "start_time": "2019-02-12T04:47:26.379865Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "2"
    }
   },
   "outputs": [],
   "source": [
    "omega_q = 1.0  # qubit level splitting\n",
    "omega_T = 3.0  # TLS level splitting\n",
    "J       = 0.1  # qubit-TLS coupling\n",
    "kappa   = 0.04 # TLS decay rate\n",
    "beta    = 1.0  # inverse bath temperature\n",
    "T       = 25.0 # final time\n",
    "nt      = 2500 # number of time steps"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define the Liouvillian\n",
    "\n",
    "The system is given by a qubit with Hamiltonian\n",
    "$\\op{H}_{q}(t) = - \\omega_{q} \\op{\\sigma}_{z} - \\epsilon(t) \\op{\\sigma}_{z}$,\n",
    "where $\\omega_{q}$ is a static energy level splitting which can time-dependently\n",
    "be modified by $\\epsilon(t)$. This qubit couples strongly to another two-level\n",
    "system (TLS) with Hamiltonian $\\op{H}_{t} = - \\omega_{t} \\op{\\sigma}_{z}$ with\n",
    "static energy level splitting $\\omega_{t}$. The coupling strength between both\n",
    "systems is given by $J$ with the interaction Hamiltonian given by $\\op{H}_{\\int}\n",
    "= J \\op{\\sigma}_{x} \\otimes \\op{\\sigma}_{x}$. The Hamiltonian for the system of\n",
    "qubit and TLS is\n",
    "\n",
    "\\begin{equation}\n",
    "  \\op{H}(t) = \\op{H}_{q}(t) \\otimes\n",
    "\\identity_{t} + \\identity_{q} \\otimes \\op{H}_{t} + \\op{H}_{\\int}.\n",
    "\\end{equation}\n",
    "In addition, the TLS is embedded in a heat bath with inverse temperature\n",
    "$\\beta$. The TLS couples to the bath with rate $\\kappa$. In order to simulate\n",
    "the dissipation arising from this coupling, we consider the two Lindblad\n",
    "operators $\\op{L}_{1} =\n",
    "\\sqrt{\\kappa (N_{th}+1)} \\identity_{q} \\otimes\n",
    "\\ket{0}\\bra{1}$ and $\\op{L}_{2} =\n",
    "\\sqrt{\\kappa N_{th}} \\identity_{q} \\otimes\n",
    "\\ket{1}\\bra{0}$ with $N_{th} =\n",
    "1/(e^{\\beta \\omega_{t}} - 1)$. The dynamics of\n",
    "the qubit-TLS system state\n",
    "$\\op{\\rho}(t)$ is then governed by the Liouville-von\n",
    "Neumann equation\n",
    "\\begin{equation}\n",
    "  \\frac{\\partial}{\\partial t} \\op{\\rho}(t) =\n",
    "\\Liouville(t) \\op{\\rho}(t)\n",
    "=\n",
    "  - i \\left[\\op{H}(t), \\op{\\rho}(t)\\right]\n",
    "  +\n",
    "\\sum_{k=1,2} \\left(\n",
    "\\op{L}_{k} \\op{\\rho}(t) \\op{L}_{k}^\\dagger\n",
    "  - \\frac{1}{2}\n",
    "\\op{L}_{k}^\\dagger\n",
    "\\op{L}_{k} \\op{\\rho}(t)\n",
    "  - \\frac{1}{2} \\op{\\rho}(t)\n",
    "\\op{L}_{k}^\\dagger\n",
    "\\op{L}_{k}\n",
    "  \\right).\n",
    "\\end{equation}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.423183Z",
     "start_time": "2019-02-12T04:47:26.389295Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "3"
    }
   },
   "outputs": [],
   "source": [
    "def liou_and_states(omega_q, omega_T, J, kappa, beta):\n",
    "    \"\"\"Liouvillian for the coupled system of qubit and TLS\"\"\"\n",
    "\n",
    "    # drift qubit Hamiltonian\n",
    "    H0_q = 0.5*omega_q*np.diag([-1,1])\n",
    "    # drive qubit Hamiltonian\n",
    "    H1_q = 0.5*np.diag([-1,1])\n",
    "\n",
    "    # drift TLS Hamiltonian\n",
    "    H0_T = 0.5*omega_T*np.diag([-1,1])\n",
    "\n",
    "    # Lift Hamiltonians to joint system operators\n",
    "    H0 = np.kron(H0_q, np.identity(2)) + np.kron(np.identity(2), H0_T)\n",
    "    H1 = np.kron(H1_q, np.identity(2))\n",
    "\n",
    "    # qubit-TLS interaction\n",
    "    H_int = J*np.fliplr(np.diag([0,1,1,0]))\n",
    "\n",
    "    # convert Hamiltonians to QuTiP objects\n",
    "    H0 = qutip.Qobj(H0+H_int)\n",
    "    H1 = qutip.Qobj(H1)\n",
    "\n",
    "    # Define Lindblad operators\n",
    "    N = 1.0/(np.exp(beta*omega_T)-1.0)\n",
    "    # Cooling on TLS\n",
    "    L1 = np.sqrt(kappa * (N+1))\\\n",
    "        * np.kron(np.identity(2), np.array([[0,1],[0,0]]))\n",
    "    # Heating on TLS\n",
    "    L2 = np.sqrt(kappa * N)\\\n",
    "        * np.kron(np.identity(2), np.array([[0,0],[1,0]]))\n",
    "\n",
    "    # convert Lindblad operators to QuTiP objects\n",
    "    L1 = qutip.Qobj(L1)\n",
    "    L2 = qutip.Qobj(L2)\n",
    "\n",
    "    # generate the Liouvillian\n",
    "    L0 = qutip.liouvillian(H=H0, c_ops=[L1,L2])\n",
    "    L1 = qutip.liouvillian(H=H1)\n",
    "\n",
    "    # define qubit-TLS basis in Hilbert space\n",
    "    psi_00 = qutip.Qobj(np.kron(np.array([1,0]), np.array([1,0])))\n",
    "    psi_01 = qutip.Qobj(np.kron(np.array([1,0]), np.array([0,1])))\n",
    "    psi_10 = qutip.Qobj(np.kron(np.array([0,1]), np.array([1,0])))\n",
    "    psi_11 = qutip.Qobj(np.kron(np.array([0,1]), np.array([0,1])))\n",
    "\n",
    "    # take as guess field a filed putting qubit and TLS into resonance\n",
    "    eps0 = lambda t, args: omega_T - omega_q\n",
    "\n",
    "    return ([L0, [L1, eps0]], psi_00, psi_01, psi_10, psi_11)\n",
    "\n",
    "L, psi_00, psi_01, psi_10, psi_11= liou_and_states(\n",
    "    omega_q=omega_q, omega_T=omega_T, J=J, kappa=kappa, beta=beta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.443310Z",
     "start_time": "2019-02-12T04:47:26.430875Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "4"
    }
   },
   "outputs": [],
   "source": [
    "proj_00 = psi_00 * psi_00.dag()\n",
    "proj_01 = psi_01 * psi_01.dag()\n",
    "proj_10 = psi_10 * psi_10.dag()\n",
    "proj_11 = psi_11 * psi_11.dag()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define the optimization target\n",
    "\n",
    "The time grid is given by `nt` equidistant\n",
    "time steps between $t=0$ and $t=T$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.453602Z",
     "start_time": "2019-02-12T04:47:26.448090Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "5"
    }
   },
   "outputs": [],
   "source": [
    "tlist = np.linspace(0, T, nt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The initial state of qubit and TLS are assumed to be in thermal equilibrium with\n",
    "the heat bath (although only the TLS is directly interacting with the bath).\n",
    "Both states are given by\n",
    "\n",
    "\\begin{equation}\n",
    "  \\op{\\rho}_{\\alpha}^{th} =\n",
    "\\frac{e^{x_{\\alpha}} \\ket{0}\\bra{0} + e^{-x_{\\alpha}} \\ket{1}\\bra{1}}{2\n",
    "\\cosh(x_{\\alpha})},\n",
    "  \\qquad\n",
    "  x_{\\alpha} = \\frac{\\omega_{\\alpha} \\beta}{2},\n",
    "\\end{equation}\n",
    "\n",
    "with $\\alpha = q,t$. The initial state of the bipartite system\n",
    "of qubit and TLS is given by the thermal state $\\op{\\rho}_{th} =\n",
    "\\op{\\rho}_{q}^{th} \\otimes \\op{\\rho}_{t}^{th}$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.466604Z",
     "start_time": "2019-02-12T04:47:26.457181Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "6"
    }
   },
   "outputs": [],
   "source": [
    "x_q = omega_q*beta/2.0\n",
    "rho_q_th = np.diag([np.exp(x_q),np.exp(-x_q)])/(2*np.cosh(x_q))\n",
    "\n",
    "x_T = omega_T*beta/2.0\n",
    "rho_T_th = np.diag([np.exp(x_T),np.exp(-x_T)])/(2*np.cosh(x_T))\n",
    "\n",
    "rho_th = qutip.Qobj(np.kron(rho_q_th, rho_T_th))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we are in the end only interested in the state of the qubit, we define\n",
    "`trace_TLS`, which calculates the partial trace over the TLS degrees of freedom.\n",
    "Hence, by passing the state $\\op{\\rho}$ of the bipartite system of qubit and\n",
    "TLS, it returns the reduced state of the qubit, $\\op{\\rho}_{q} =\n",
    "\\tr_{t}\\{\\op{\\rho}\\}$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.482459Z",
     "start_time": "2019-02-12T04:47:26.472974Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "7"
    }
   },
   "outputs": [],
   "source": [
    "def trace_TLS(rho):\n",
    "    \"\"\"Partial trace over the TLS degrees of freedom\"\"\"\n",
    "    rho_q = np.zeros(shape=(2,2), dtype=np.complex_)\n",
    "    rho_q[0,0] = rho[0,0] + rho[1,1]\n",
    "    rho_q[0,1] = rho[0,2] + rho[1,3]\n",
    "    rho_q[1,0] = rho[2,0] + rho[3,1]\n",
    "    rho_q[1,1] = rho[2,2] + rho[3,3]\n",
    "    return qutip.Qobj(rho_q)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As target state we take (temporarily) the ground state of the bipartite system,\n",
    "i.e., $\\op{\\rho}_{\\tgt} = \\ket{00}\\bra{00}$. Note that in the end we will only\n",
    "optimize the reduced state of the qubit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.496869Z",
     "start_time": "2019-02-12T04:47:26.485940Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "8"
    }
   },
   "outputs": [],
   "source": [
    "rho_q_trg = np.diag([1,0])\n",
    "rho_T_trg = np.diag([1,0])\n",
    "rho_trg = np.kron(rho_q_trg, rho_T_trg)\n",
    "rho_trg = qutip.Qobj(rho_trg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, the list of `objectives` is defined, which contains the initial and target\n",
    "state and the Liouvillian $\\Liouville(t)$ determining the evolution of the\n",
    "system."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.506011Z",
     "start_time": "2019-02-12T04:47:26.501241Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "9"
    }
   },
   "outputs": [],
   "source": [
    "objectives = [\n",
    "    krotov.Objective(initial_state=rho_th, target=rho_trg, H=L)\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the following, we define the shape function $S(t)$, which we use in order to\n",
    "ensure a smooth switch on and off in the beginning and end. Note that at times\n",
    "$t$ where $S(t)$ vanishes, the updates of the field is suppressed. A priori,\n",
    "this has\n",
    "nothing to do with the shape of the field on input."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.514731Z",
     "start_time": "2019-02-12T04:47:26.508936Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "10"
    }
   },
   "outputs": [],
   "source": [
    "def S(t):\n",
    "    \"\"\"Shape function for the field update\"\"\"\n",
    "    return krotov.shapes.flattop(\n",
    "        t, t_start=0, t_stop=T,\n",
    "        t_rise=0.05*T, t_fall=0.05*T,\n",
    "        func='sinsq')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However, we also want to start with a shaped field on input. Hence, we use the\n",
    "previously defined shape function $S(t)$ to shape $\\epsilon_{0}(t)$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.524627Z",
     "start_time": "2019-02-12T04:47:26.517577Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "11"
    }
   },
   "outputs": [],
   "source": [
    "def shape_field(eps0):\n",
    "    \"\"\"Applies the shape function S(t) to the guess field\"\"\"\n",
    "    eps0_shaped = lambda t, args: eps0(t, args)*S(t)\n",
    "    return eps0_shaped\n",
    "\n",
    "L[1][1] = shape_field(L[1][1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At last, before heading to the actual optimization below, we assign the shape\n",
    "function $S(t)$ to the OCT parameters of the control and choose `lambda_a`, a\n",
    "numerical\n",
    "parameter that controls the field update magnitude in each iteration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.534872Z",
     "start_time": "2019-02-12T04:47:26.527916Z"
    }
   },
   "outputs": [],
   "source": [
    "pulse_options = {\n",
    "    L[1][1]: dict(lambda_a=0.01, shape=S)\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulate the dynamics of the guess field"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.545108Z",
     "start_time": "2019-02-12T04:47:26.537953Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "13"
    }
   },
   "outputs": [],
   "source": [
    "def plot_pulse(pulse, tlist):\n",
    "    fig, ax = plt.subplots()\n",
    "    if callable(pulse):\n",
    "        pulse = np.array([pulse(t, args=None) for t in tlist])\n",
    "    ax.plot(tlist, pulse)\n",
    "    ax.set_xlabel('time')\n",
    "    ax.set_ylabel('pulse amplitude')\n",
    "    plt.show(fig)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following plot shows the guess field $\\epsilon_{0}(t)$, which is, as chosen\n",
    "above, just a constant field that puts qubit and TLS into resonance (with a\n",
    "smooth switch-on and switch-off)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.773279Z",
     "start_time": "2019-02-12T04:47:26.547926Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "14"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_pulse(L[1][1], tlist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before optimizing, we solve the equation of motion for the guess field\n",
    "$\\epsilon_{0}(t)$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:26.872504Z",
     "start_time": "2019-02-12T04:47:26.775372Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "15"
    }
   },
   "outputs": [],
   "source": [
    "guess_dynamics = objectives[0].mesolve(\n",
    "    tlist, e_ops=[proj_00, proj_01, proj_10, proj_11])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By inspecting the population dynamics of qubit and TLS ground state, we see that\n",
    "both are oscillating and especially the qubit's ground state population reaches\n",
    "a maximal value at intermediate times $t < T$. This maximum is indeed the\n",
    "maximum that is physically possible. However, we want to reach this maximum at\n",
    "final time $T$ (not before), so the guess field is not doing the right thing so\n",
    "far."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:27.116092Z",
     "start_time": "2019-02-12T04:47:26.874340Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "16"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_population(result):\n",
    "    fig, ax = plt.subplots()\n",
    "    ax.plot(result.times, np.array(result.expect[0])+np.array(result.expect[1]),\n",
    "            label='qubit 0')\n",
    "    ax.plot(result.times, np.array(result.expect[0])+np.array(result.expect[2]),\n",
    "            label='TLS 0')\n",
    "    ax.legend()\n",
    "    ax.set_xlabel('time')\n",
    "    ax.set_ylabel('population')\n",
    "    plt.show(fig)\n",
    "\n",
    "plot_population(guess_dynamics)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimize"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our optimization target is the ground state $\\ket{\\Psi_{q}^{\\tgt}}\n",
    "= \\ket{0}$ of the qubit, irrespective of the state of the TLS. Thus, our\n",
    "optimization functional reads\n",
    "\n",
    "\\begin{equation}\n",
    "  F_{re} = 1 -\n",
    "\\Braket{\\Psi_{q}^{\\tgt}}{\\tr_{t}\\{\\op{\\rho}(T)\\} \\,|\\; \\Psi_{q}^{\\tgt}}\n",
    "\\end{equation}\n",
    "\n",
    "and we first define `print_qubit_error`, which prints out the\n",
    "above functional after each iteration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:27.124250Z",
     "start_time": "2019-02-12T04:47:27.118668Z"
    }
   },
   "outputs": [],
   "source": [
    "def print_qubit_error(**args):\n",
    "    \"\"\"Utility function writing the qubit error to screen\"\"\"\n",
    "    taus = []\n",
    "    for state_T in args['fw_states_T']:\n",
    "        state_q_T = trace_TLS(state_T)\n",
    "        taus.append(state_q_T[0,0].real)\n",
    "    J_T_re = 1 - np.average(taus)\n",
    "    print(\"    qubit error: %.1e\"  % J_T_re)\n",
    "    return J_T_re"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to minimize the above functional, we need to provide the correct\n",
    "`chi_constructor` for the Krotov optimization, as it contains all necessary\n",
    "information. Given our bipartite system and choice of $F_{re}$, the\n",
    "$\\op{\\chi}(T)$ reads\n",
    "\n",
    "\\begin{equation}\n",
    "  \\op{\\chi}(T) =\n",
    "  \\sum_{k=0,1} a_{k}\n",
    "\\op{\\rho}_{q}^{\\tgt} \\otimes \\ket{k}\\bra{k}\n",
    "\\end{equation}\n",
    "\n",
    "with $\\{\\ket{k}\\}$ a\n",
    "basis for the TLS Hilbert space."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:27.144420Z",
     "start_time": "2019-02-12T04:47:27.132277Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "18"
    }
   },
   "outputs": [],
   "source": [
    "def TLS_onb_trg():\n",
    "    \"\"\"Returns the tensor product of qubit target state\n",
    "    and a basis for the TLS Hilbert space\"\"\"\n",
    "    rho1 = qutip.Qobj(np.kron(rho_q_trg, np.diag([1,0])))\n",
    "    rho2 = qutip.Qobj(np.kron(rho_q_trg, np.diag([0,1])))\n",
    "    return [rho1, rho2]\n",
    "\n",
    "TLS_onb = TLS_onb_trg()\n",
    "\n",
    "def chis_qubit(fw_states_T, objectives, tau_vals):\n",
    "    \"\"\"Calculate chis for the chosen functional\"\"\"\n",
    "    chis = []\n",
    "    for state_i_T in fw_states_T:\n",
    "        chis_i = np.zeros(shape=(4,4), dtype=np.complex_)\n",
    "        for state_k in TLS_onb:\n",
    "            a_i_k = krotov.optimize._overlap(state_i_T, state_k)\n",
    "            chis_i += a_i_k * state_k\n",
    "        chis.append(qutip.Qobj(chis_i))\n",
    "    return chis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following carries out the optimization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration 0\n",
      "    objectives:\n",
      "        1:Herm[4,4] - {[[[4,4],[4,4]], [[[4,4],[4,4]], u1(t)]]} - Herm[4,4]\n",
      "    adjoint objectives:\n",
      "        1:Herm[4,4] - {[[[4,4],[4,4]], [[[4,4],[4,4]], u1(t)]]} - Herm[4,4]\n",
      "    S(t) (ranges): [0.000000, 1.000000]\n",
      "    duration: 0.5 secs (started at 2019-03-01 01:44:46)\n",
      "    optimized pulses (ranges): [0.00, 2.00]\n",
      "    ∫gₐ(t)dt: 0.00e+00\n",
      "    λₐ: 1.00e-02\n",
      "    storage (bw, fw, fw0): None, None, None\n",
      "    fw_states_T norm: 1.000000\n",
      "    τ: (7.97e-01:0.00π)\n",
      "    qubit error: 1.1e-01\n",
      "Iteration 1\n",
      "    duration: 2.4 secs (started at 2019-03-01 01:44:46)\n",
      "    optimized pulses (ranges): [0.00, 2.06]\n",
      "    ∫gₐ(t)dt: 7.72e-02\n",
      "    λₐ: 1.00e-02\n",
      "    storage (bw, fw, fw0): [1 * ndarray(2500)] (1.3 MB), None, None\n",
      "    fw_states_T norm: 1.000000\n",
      "    τ: (7.98e-01:0.00π)\n",
      "    qubit error: 1.1e-01\n",
      "Iteration 2\n",
      "    duration: 2.5 secs (started at 2019-03-01 01:44:49)\n",
      "    optimized pulses (ranges): [0.00, 2.23]\n",
      "    ∫gₐ(t)dt: 5.72e-01\n",
      "    λₐ: 1.00e-02\n",
      "    storage (bw, fw, fw0): [1 * ndarray(2500)] (1.3 MB), None, None\n",
      "    fw_states_T norm: 1.000000\n",
      "    τ: (8.01e-01:0.00π)\n",
      "    qubit error: 6.7e-02\n",
      "Iteration 3\n",
      "    duration: 2.6 secs (started at 2019-03-01 01:44:51)\n",
      "    optimized pulses (ranges): [0.00, 2.33]\n",
      "    ∫gₐ(t)dt: 8.11e-02\n",
      "    λₐ: 1.00e-02\n",
      "    storage (bw, fw, fw0): [1 * ndarray(2500)] (1.3 MB), None, None\n",
      "    fw_states_T norm: 1.000000\n",
      "    τ: (7.99e-01:0.00π)\n",
      "    qubit error: 5.0e-02\n",
      "Iteration 4\n",
      "    duration: 2.6 secs (started at 2019-03-01 01:44:54)\n",
      "    optimized pulses (ranges): [0.00, 2.19]\n",
      "    ∫gₐ(t)dt: 2.16e-01\n",
      "    λₐ: 1.00e-02\n",
      "    storage (bw, fw, fw0): [1 * ndarray(2500)] (1.3 MB), None, None\n",
      "    fw_states_T norm: 1.000000\n",
      "    τ: (8.02e-01:0.00π)\n",
      "    qubit error: 4.9e-02\n",
      "Iteration 5\n",
      "    duration: 2.6 secs (started at 2019-03-01 01:44:56)\n",
      "    optimized pulses (ranges): [0.00, 2.15]\n",
      "    ∫gₐ(t)dt: 6.38e-02\n",
      "    λₐ: 1.00e-02\n",
      "    storage (bw, fw, fw0): [1 * ndarray(2500)] (1.3 MB), None, None\n",
      "    fw_states_T norm: 1.000000\n",
      "    τ: (8.03e-01:0.00π)\n",
      "    qubit error: 4.9e-02\n"
     ]
    }
   ],
   "source": [
    "# NBVAL_IGNORE_OUTPUT\n",
    "# the DensityMatrixODEPropagator is not sufficiently exact to guarantee that\n",
    "# you won't get very slightly different results in the optimization when\n",
    "# running this on different systems\n",
    "oct_result = krotov.optimize_pulses(\n",
    "    objectives, pulse_options, tlist,\n",
    "    propagator=krotov.propagators.DensityMatrixODEPropagator(\n",
    "        atol=1e-10, rtol=1e-8\n",
    "    ),\n",
    "    chi_constructor=chis_qubit,\n",
    "    info_hook=krotov.info_hooks.chain(\n",
    "        krotov.info_hooks.print_debug_information,\n",
    "        print_qubit_error,\n",
    "    ),\n",
    "    check_convergence=krotov.convergence.check_monotonic_error,\n",
    "    iter_stop=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:39.603540Z",
     "start_time": "2019-02-12T04:47:39.598097Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "20"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Krotov Optimization Result\n",
       "--------------------------\n",
       "- Started at 2019-03-01 01:44:46\n",
       "- Number of objectives: 1\n",
       "- Number of iterations: 5\n",
       "- Reason for termination: Reached 5 iterations\n",
       "- Ended at 2019-03-01 01:44:59"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oct_result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulate the dynamics of the optimized field\n",
    "\n",
    "The plot of the optimized field\n",
    "shows, that the optimization slightly shifts the field such that qubit and TLS\n",
    "are no longer perfectly in resonance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:39.774187Z",
     "start_time": "2019-02-12T04:47:39.607074Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "21"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_pulse(oct_result.optimized_controls[0], tlist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This slight shift of qubit and TLS out of resonance delays the population\n",
    "oscillations between\n",
    "qubit and TLS ground state such that the qubit ground state\n",
    "is maximally\n",
    "populated at final time $T$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-12T04:47:40.231722Z",
     "start_time": "2019-02-12T04:47:39.777301Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "22"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "optimized_dynamics = oct_result.optimized_objectives[0].mesolve(\n",
    "    tlist, e_ops=[proj_00, proj_01, proj_10, proj_11])\n",
    "\n",
    "plot_population(optimized_dynamics)"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "jupytext": {
   "formats": ""
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
