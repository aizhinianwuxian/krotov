{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Optimization of a Dissipative Quantum Gate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:45:02.638669Z",
     "start_time": "2019-02-11T06:45:01.335232Z"
    },
    "lines_to_next_cell": 1
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "matplotlib.pylab 1.15.4\n",
      "scipy            1.2.0\n",
      "qutip            4.3.1\n",
      "numpy            1.15.4\n",
      "matplotlib       3.0.2\n",
      "krotov           0.1.0.post1+dev\n",
      "CPython 3.6.8\n",
      "IPython 7.2.0\n"
     ]
    }
   ],
   "source": [
    "# NBVAL_IGNORE_OUTPUT\n",
    "%load_ext watermark\n",
    "import qutip\n",
    "import numpy as np\n",
    "import scipy\n",
    "import matplotlib\n",
    "import matplotlib.pylab as plt\n",
    "import krotov\n",
    "import copy\n",
    "from functools import partial\n",
    "from itertools import product\n",
    "%watermark -v --iversions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\newcommand{tr}[0]{\\operatorname{tr}}\n",
    "\\newcommand{diag}[0]{\\operatorname{diag}}\n",
    "\\newcommand{abs}[0]{\\operatorname{abs}}\n",
    "\\newcommand{pop}[0]{\\operatorname{pop}}\n",
    "\\newcommand{aux}[0]{\\text{aux}}\n",
    "\\newcommand{int}[0]{\\text{int}}\n",
    "\\newcommand{opt}[0]{\\text{opt}}\n",
    "\\newcommand{tgt}[0]{\\text{tgt}}\n",
    "\\newcommand{init}[0]{\\text{init}}\n",
    "\\newcommand{lab}[0]{\\text{lab}}\n",
    "\\newcommand{rwa}[0]{\\text{rwa}}\n",
    "\\newcommand{bra}[1]{\\langle#1\\vert}\n",
    "\\newcommand{ket}[1]{\\vert#1\\rangle}\n",
    "\\newcommand{Bra}[1]{\\left\\langle#1\\right\\vert}\n",
    "\\newcommand{Ket}[1]{\\left\\vert#1\\right\\rangle}\n",
    "\\newcommand{Braket}[2]{\\left\\langle #1\\vphantom{#2} \\mid #2\\vphantom{#1}\\right\\rangle}\n",
    "\\newcommand{ketbra}[2]{\\vert#1\\rangle\\!\\langle#2\\vert}\n",
    "\\newcommand{op}[1]{\\hat{#1}}\n",
    "\\newcommand{Op}[1]{\\hat{#1}}\n",
    "\\newcommand{dd}[0]{\\,\\text{d}}\n",
    "\\newcommand{Liouville}[0]{\\mathcal{L}}\n",
    "\\newcommand{DynMap}[0]{\\mathcal{E}}\n",
    "\\newcommand{identity}[0]{\\mathbf{1}}\n",
    "\\newcommand{Norm}[1]{\\lVert#1\\rVert}\n",
    "\\newcommand{Abs}[1]{\\left\\vert#1\\right\\vert}\n",
    "\\newcommand{avg}[1]{\\langle#1\\rangle}\n",
    "\\newcommand{Avg}[1]{\\left\\langle#1\\right\\rangle}\n",
    "\\newcommand{AbsSq}[1]{\\left\\vert#1\\right\\vert^2}\n",
    "\\newcommand{Re}[0]{\\operatorname{Re}}\n",
    "\\newcommand{Im}[0]{\\operatorname{Im}}$\n",
    "\n",
    "This example illustrates the optimization for a quantum gate in an open quantum system, where the dynamics is governed by the Liouville-von Neumann equation. A naive extension of a gate optimization to Liouville space would seem to imply that it is necessary to optimize over the full basis of Liouville space (16 matrices, for a two-qubit gate). However, Goerz et al., New J. Phys. 16, 055012 (2014) [[GoerzNJP2014][]] showed that is not necessary, but that a set of 3 density matrices is sufficient to track the optimization.\n",
    "\n",
    "This example reproduces the \"Example II\" from that paper, considering the optimization towards a $\\sqrt{\\text{iSWAP}}$ two-qubit gate on a system of two transmons with a shared transmission line resonator.\n",
    "\n",
    "[GoerzNJP2014]: https://michaelgoerz.net/research/Goerz_NJP2014.pdf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The two-transmon system"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We consider the Hamiltonian from Eq (17) in [GoerzNJP2014], in the rotating wave approximation, together with spontaneous decay and dephasing of each qubit. Alltogether, we define the Liouvillian as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:45:02.660876Z",
     "start_time": "2019-02-11T06:45:02.642420Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "def two_qubit_transmon_liouvillian(\n",
    "    ω1, ω2, ωd, δ1, δ2, J, q1T1, q2T1, q1T2, q2T2, T, Omega, n_qubit\n",
    "):\n",
    "    from qutip import tensor, identity, destroy\n",
    "\n",
    "    b1 = tensor(identity(n_qubit), destroy(n_qubit))\n",
    "    b2 = tensor(destroy(n_qubit), identity(n_qubit))\n",
    "\n",
    "    H0 = (\n",
    "        (ω1 - ωd - δ1 / 2) * b1.dag() * b1\n",
    "        + (δ1 / 2) * b1.dag() * b1 * b1.dag() * b1\n",
    "        + (ω2 - ωd - δ2 / 2) * b2.dag() * b2\n",
    "        + (δ2 / 2) * b2.dag() * b2 * b2.dag() * b2\n",
    "        + J * (b1.dag() * b2 + b1 * b2.dag())\n",
    "    )\n",
    "\n",
    "    H1_re = 0.5 * (b1 + b1.dag() + b2 + b2.dag())\n",
    "    H1_im = 0.5j * (b1 - b1.dag() + b2 - b2.dag())\n",
    "\n",
    "    H = [H0, [H1_re, Omega], [H1_im, ZeroPulse]]\n",
    "\n",
    "    A1 = np.sqrt(1 / q1T1) * b1  # decay of qubit 1\n",
    "    A2 = np.sqrt(1 / q2T1) * b2  # decay of qubit 2\n",
    "    A3 = np.sqrt(1 / q1T2) * b1.dag() * b1  # dephasing of qubit 1\n",
    "    A4 = np.sqrt(1 / q2T2) * b2.dag() * b2  # dephasing of qubit 2\n",
    "\n",
    "    L = krotov.objectives.liouvillian(H, c_ops=[A1, A2, A3, A4])\n",
    "    return L"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " We will use internal units GHz and ns. Values in GHz contain an implicit factor 2π, and MHz and μs are converted to GHz and ns, respectively:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:45:02.670987Z",
     "start_time": "2019-02-11T06:45:02.664554Z"
    }
   },
   "outputs": [],
   "source": [
    "GHz = 2 * np.pi\n",
    "MHz = 1e-3 * GHz\n",
    "ns = 1\n",
    "μs = 1000 * ns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will use the same parameters as those given in Table 2 of [GoerzNJP2014]:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:45:02.695371Z",
     "start_time": "2019-02-11T06:45:02.675123Z"
    }
   },
   "outputs": [],
   "source": [
    "ω1 = 4.3796 * GHz  # qubit frequency 1\n",
    "ω2 = 4.6137 * GHz  # qubit frequency 2\n",
    "ωd = 4.4985 * GHz  # drive frequency\n",
    "δ1 = -239.3 * MHz  # anharmonicity 1\n",
    "δ2 = -242.8 * MHz  # anharmonicity 2\n",
    "J = -2.3 * MHz     # effective qubit-qubit coupling\n",
    "q1T1 = 38.0 * μs   # decay time for qubit 1\n",
    "q2T1 = 32.0 * μs   # decay time for qubit 2\n",
    "q1T2 = 29.5 * μs   # dephasing time for qubit 1\n",
    "q2T2 = 16.0 * μs   # dephasing time for qubit 2\n",
    "T = 400 * ns       # gate duration\n",
    "n_qubit = 6        # number of transmon levels to consider"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:45:02.709467Z",
     "start_time": "2019-02-11T06:45:02.700926Z"
    }
   },
   "outputs": [],
   "source": [
    "tlist = np.linspace(0, T, 2000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the Liouvillian, note the control being split up into a separate real and imaginary part. As a guess control we use a real-valued constant pulse with and amplitude of 35 MHz, acting over 400 ns, with a switch-on and switch-off in the first 20 ns (see plot below)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:45:02.724459Z",
     "start_time": "2019-02-11T06:45:02.713026Z"
    }
   },
   "outputs": [],
   "source": [
    "def Omega(t, args):\n",
    "    E0 = 35.0 * MHz\n",
    "    return E0 * krotov.shapes.flattop(t, 0, T, t_rise=(20 * ns), func='sinsq')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The imaginary part start out as zero:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:45:02.735112Z",
     "start_time": "2019-02-11T06:45:02.729230Z"
    }
   },
   "outputs": [],
   "source": [
    "def ZeroPulse(t, args):\n",
    "    return 0.0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now instantiate the Liouvillian:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:45:02.767160Z",
     "start_time": "2019-02-11T06:45:02.738257Z"
    }
   },
   "outputs": [],
   "source": [
    "L = two_qubit_transmon_liouvillian(\n",
    "    ω1, ω2, ωd, δ1, δ2, J, q1T1, q2T1, q1T2, q2T2, T, Omega, n_qubit\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The guess pulse looks as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:45:02.785182Z",
     "start_time": "2019-02-11T06:45:02.770389Z"
    }
   },
   "outputs": [],
   "source": [
    "def plot_pulse(pulse, tlist, xlimit=None):\n",
    "    fig, ax = plt.subplots()\n",
    "    if callable(pulse):\n",
    "        pulse = np.array([pulse(t, None) for t in tlist])\n",
    "    ax.plot(tlist, pulse/MHz)\n",
    "    ax.set_xlabel('time (ns)')\n",
    "    ax.set_ylabel('pulse amplitude (MHz)')\n",
    "    if xlimit is not None:\n",
    "        ax.set_xlim(xlimit)\n",
    "    plt.show(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:45:03.035569Z",
     "start_time": "2019-02-11T06:45:02.788796Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_pulse(L[1][1], tlist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimization objectives"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our target gate is $\\sqrt{\\text{iSWAP}}$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:45:03.044011Z",
     "start_time": "2019-02-11T06:45:03.038605Z"
    }
   },
   "outputs": [],
   "source": [
    "gate = qutip.gates.sqrtiswap()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:45:03.060036Z",
     "start_time": "2019-02-11T06:45:03.046519Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/latex": [
       "Quantum object: dims = [[2, 2], [2, 2]], shape = (4, 4), type = oper, isherm = False\\begin{equation*}\\left(\\begin{array}{*{11}c}1.0 & 0.0 & 0.0 & 0.0\\\\0.0 & 0.707 & 0.707j & 0.0\\\\0.0 & 0.707j & 0.707 & 0.0\\\\0.0 & 0.0 & 0.0 & 1.0\\\\\\end{array}\\right)\\end{equation*}"
      ],
      "text/plain": [
       "Quantum object: dims = [[2, 2], [2, 2]], shape = (4, 4), type = oper, isherm = False\n",
       "Qobj data =\n",
       "[[1.        +0.j         0.        +0.j         0.        +0.j\n",
       "  0.        +0.j        ]\n",
       " [0.        +0.j         0.70710678+0.j         0.        +0.70710678j\n",
       "  0.        +0.j        ]\n",
       " [0.        +0.j         0.        +0.70710678j 0.70710678+0.j\n",
       "  0.        +0.j        ]\n",
       " [0.        +0.j         0.        +0.j         0.        +0.j\n",
       "  1.        +0.j        ]]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gate"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The key idea explored in [GoerzNJP2014] is that a set of three density matrices is sufficient to track the optimization\n",
    "\n",
    "\\begin{align}\n",
    "\\Op{\\rho}_1 &= \\sum_{i=1}^{d}\n",
    "                  \\frac{2 (d-i+1)}{d (d+1)} \\ketbra{i}{i} \\\\\n",
    "              \\Op{\\rho}_2 &= \\sum_{i,j=1}^{d}\n",
    "                  \\frac{1}{d} \\ketbra{i}{j} \\\\\n",
    "              \\Op{\\rho}_3 &= \\sum_{i=1}^{d}\n",
    "                  \\frac{1}{d} \\ketbra{i}{i}\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In our case, $d=4$ for a two qubit-gate, and the $\\ket{i}$, $\\ket{j}$ are the canonical basis states $\\ket{00}$, $\\ket{01}$, $\\ket{10}$, $\\ket{11}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:45:03.072700Z",
     "start_time": "2019-02-11T06:45:03.063271Z"
    }
   },
   "outputs": [],
   "source": [
    "ket00 = qutip.ket((0, 0), dim=(n_qubit, n_qubit))\n",
    "ket01 = qutip.ket((0, 1), dim=(n_qubit, n_qubit))\n",
    "ket10 = qutip.ket((1, 0), dim=(n_qubit, n_qubit))\n",
    "ket11 = qutip.ket((1, 1), dim=(n_qubit, n_qubit))\n",
    "basis = [ket00, ket01, ket10, ket11]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The three density matrices play different roles in the optimization, and, as shown in [GoerzNJP2014], convergence may improve significantly by weighing the states relatively to each other. For this example, we place a strong emphasis on the optimization $\\Op{\\rho}_1 \\rightarrow \\Op{O}^\\dagger \\Op{\\rho}_1 \\Op{O}$, by a factor of 20. This reflects that the hardest part of the optimization is identifying the basis in which the gate is diagonal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:45:03.091389Z",
     "start_time": "2019-02-11T06:45:03.081002Z"
    }
   },
   "outputs": [],
   "source": [
    "weights = [20, 1, 1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `krotov.gate_objectives` routine can initialize the density matrices $\\Op{\\rho}_1$, $\\Op{\\rho}_2$, $\\Op{\\rho}_3$ automatically, via the parameter `liouville_states_set`. Alternatively, we could also use the `'full'` basis of 16 matrices or the extended set of $d+1 = 5$ pure-state density matrices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:45:03.147568Z",
     "start_time": "2019-02-11T06:45:03.094183Z"
    }
   },
   "outputs": [],
   "source": [
    "objectives = krotov.gate_objectives(basis, gate, L, liouville_states_set='3states', weights=weights)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The weights are automatically normalized and stored in the `weight` attribute of the three objectives:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:45:03.157205Z",
     "start_time": "2019-02-11T06:45:03.151244Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.72727\n",
      "0.13636\n",
      "0.13636\n"
     ]
    }
   ],
   "source": [
    "for obj in objectives:\n",
    "    print(\"%.5f\" % obj.weight)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dynamics under the Guess Pulse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For numerical efficiency, both for the analysis of the guess/optimized controls, we will use a stateful density matrix propagator:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:45:03.169293Z",
     "start_time": "2019-02-11T06:45:03.161987Z"
    }
   },
   "outputs": [],
   "source": [
    "propagator = krotov.propagators.DensityMatrixODEPropagator()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A true physical measure for the success of the optimization is the \"average gate fidelity\". Evaluating the fidelity requires to simulate the dynamics of the full basis of Liouville space:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:45:03.196583Z",
     "start_time": "2019-02-11T06:45:03.183415Z"
    }
   },
   "outputs": [],
   "source": [
    "full_liouville_basis = [psi * phi.dag() for (psi, phi) in product(basis, basis)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We propagate these under the guess control:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:45:03.215485Z",
     "start_time": "2019-02-11T06:45:03.209570Z"
    }
   },
   "outputs": [],
   "source": [
    "def propagate_guess(initial_state):\n",
    "    return objectives[0].propagate(\n",
    "        tlist,\n",
    "        propagator=propagator,\n",
    "        rho0=initial_state,\n",
    "    ).states[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:47:00.182705Z",
     "start_time": "2019-02-11T06:45:03.218128Z"
    }
   },
   "outputs": [],
   "source": [
    "full_states_T = qutip.parallel_map(\n",
    "    propagate_guess, values=full_liouville_basis,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:47:00.218393Z",
     "start_time": "2019-02-11T06:47:00.186803Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F_avg = 0.344\n"
     ]
    }
   ],
   "source": [
    "print(\"F_avg = %.3f\" % krotov.functionals.F_avg(full_states_T, basis, gate))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also consider the population dynamics, under the guess pulse. For this purpose we propagate the pure-state density matrices corresponding to the canonical logical basis in Hilbert space, and obtain the expectation values for the projection onto these same states:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:47:00.228820Z",
     "start_time": "2019-02-11T06:47:00.221394Z"
    }
   },
   "outputs": [],
   "source": [
    "rho00, rho01, rho10, rho11 = [qutip.ket2dm(psi) for psi in basis]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:47:00.239522Z",
     "start_time": "2019-02-11T06:47:00.232498Z"
    }
   },
   "outputs": [],
   "source": [
    "def propagate_guess_for_expvals(initial_state):\n",
    "    return objectives[0].propagate(\n",
    "        tlist,\n",
    "        propagator=propagator,\n",
    "        rho0=initial_state,\n",
    "        e_ops=[rho00, rho01, rho10, rho11]\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:47:00.252399Z",
     "start_time": "2019-02-11T06:47:00.242359Z"
    }
   },
   "outputs": [],
   "source": [
    "def plot_population_dynamics(dyn00, dyn01, dyn10, dyn11):\n",
    "    fig, axs = plt.subplots(ncols=2, nrows=2, figsize=(16, 8))\n",
    "    axs = np.ndarray.flatten(axs)\n",
    "    labels = ['00', '01', '10', '11']\n",
    "    dyns = [dyn00, dyn01, dyn10, dyn11]\n",
    "    for (ax, dyn, title) in zip(axs, dyns, labels):\n",
    "        for (i, label) in enumerate(labels):\n",
    "            ax.plot(dyn.times, dyn.expect[i], label=label)\n",
    "        ax.legend()\n",
    "        ax.set_title(title)\n",
    "    plt.show(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:47:35.789324Z",
     "start_time": "2019-02-11T06:47:00.255715Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x576 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_population_dynamics(\n",
    "    *qutip.parallel_map(\n",
    "        propagate_guess_for_expvals,\n",
    "        values=[rho00, rho01, rho10, rho11],\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before running the optimizaton, we have to define the optimization parameters for the controls, the Krotov step size $\\lambda_a$ and the update-shape that will ensure that the pulse switch-on and switch-off stays intact."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:47:35.808680Z",
     "start_time": "2019-02-11T06:47:35.799011Z"
    }
   },
   "outputs": [],
   "source": [
    "pulse_options = {\n",
    "    L[i][1]: dict(\n",
    "        lambda_a=1.0,\n",
    "        shape=partial(\n",
    "            krotov.shapes.flattop, t_start=0, t_stop=T, t_rise=(20 * ns))\n",
    "        )\n",
    "    for i in [1, 2]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:47:35.822754Z",
     "start_time": "2019-02-11T06:47:35.812255Z"
    }
   },
   "outputs": [],
   "source": [
    "import logging\n",
    "logger = logging.getLogger()\n",
    "logger.setLevel(logging.DEBUG)\n",
    "ch = logging.StreamHandler()\n",
    "ch.setLevel(logging.DEBUG)\n",
    "formatter = logging.Formatter(\"%(asctime)s:%(message)s\")\n",
    "ch.setFormatter(formatter)\n",
    "logger.handlers = []\n",
    "logger.addHandler(ch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-02-11T06:47:35.850323Z",
     "start_time": "2019-02-11T06:47:35.826601Z"
    }
   },
   "outputs": [],
   "source": [
    "def print_error(**args):\n",
    "    J_T_hs = krotov.functionals.J_T_hs(\n",
    "        args['fw_states_T'], args['objectives'], args['tau_vals']\n",
    "    )\n",
    "    print(\"Iteration %d: \\tJ_T_hs = %f\" % (args['iteration'], J_T_hs))\n",
    "    return J_T_hs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2019-02-11 02:03:26,073:Initializing optimization with Krotov's method\n",
      "2019-02-11 02:03:26,112:Started initial forward propagation of objective 0\n",
      "2019-02-11 02:03:40,671:Finished initial forward propagation of objective 0\n",
      "2019-02-11 02:03:40,672:Started initial forward propagation of objective 1\n",
      "2019-02-11 02:03:52,199:Finished initial forward propagation of objective 1\n",
      "2019-02-11 02:03:52,199:Started initial forward propagation of objective 2\n",
      "2019-02-11 02:04:04,405:Finished initial forward propagation of objective 2\n",
      "2019-02-11 02:04:04,408:Started Krotov iteration 1\n",
      "2019-02-11 02:04:04,415:Started backward propagation of state 0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration 0: \tJ_T_hs = 0.063449\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2019-02-11 02:04:12,823:Finished backward propagation of state 0\n",
      "2019-02-11 02:04:12,824:Started backward propagation of state 1\n",
      "2019-02-11 02:04:21,094:Finished backward propagation of state 1\n",
      "2019-02-11 02:04:21,095:Started backward propagation of state 2\n",
      "2019-02-11 02:04:30,908:Finished backward propagation of state 2\n",
      "2019-02-11 02:04:30,909:Started forward propagation/pulse update\n"
     ]
    },
    {
     "ename": "IntegratorConcurrencyError",
     "evalue": "Integrator `zvode` can be used to solve only a single problem at a time. If you want to integrate multiple problems, consider using a different integrator (see `ode.set_integrator`)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIntegratorConcurrencyError\u001b[0m                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-29-f13f2354e6c9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0mchi_constructor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkrotov\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunctionals\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchis_hs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0minfo_hook\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mprint_error\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m     \u001b[0miter_stop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m     \u001b[0;31m#parallel_map=(\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0;31m#    qutip.parallel_map,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/Documents/Programming/github/krotov/src/krotov/optimize.py\u001b[0m in \u001b[0;36moptimize_pulses\u001b[0;34m(objectives, pulse_options, tlist, propagator, chi_constructor, mu, sigma, iter_start, iter_stop, check_convergence, state_dependent_constraint, info_hook, modify_params_after_iter, storage, parallel_map, store_all_pulses)\u001b[0m\n\u001b[1;32m    349\u001b[0m                     \u001b[0mtlist\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    350\u001b[0m                     \u001b[0mtime_index\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 351\u001b[0;31m                     \u001b[0mpropagators\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    352\u001b[0m                 ),\n\u001b[1;32m    353\u001b[0m             )\n",
      "\u001b[0;32m~/Documents/Programming/github/krotov/.venv/py36/lib/python3.6/site-packages/qutip/parallel.py\u001b[0m in \u001b[0;36mserial_map\u001b[0;34m(task, values, task_args, task_kwargs, **kwargs)\u001b[0m\n\u001b[1;32m    181\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    182\u001b[0m         \u001b[0mprogress_bar\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 183\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtask\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mtask_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mtask_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    184\u001b[0m         \u001b[0mresults\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    185\u001b[0m     \u001b[0mprogress_bar\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfinished\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/Documents/Programming/github/krotov/src/krotov/optimize.py\u001b[0m in \u001b[0;36m_forward_propagation_step\u001b[0;34m(i_state, states, objectives, pulses, pulses_mapping, tlist, time_index, propagators)\u001b[0m\n\u001b[1;32m    623\u001b[0m     \u001b[0mdt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtlist\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtime_index\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mtlist\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtime_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    624\u001b[0m     return propagators[i_state](\n\u001b[0;32m--> 625\u001b[0;31m         \u001b[0mH\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc_ops\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minitialize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtime_index\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    626\u001b[0m     )\n",
      "\u001b[0;32m~/Documents/Programming/github/krotov/src/krotov/propagators.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, L, rho, dt, c_ops, backwards, initialize)\u001b[0m\n\u001b[1;32m    152\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_L_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mL\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    153\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_t\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mdt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 154\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_r\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mintegrate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_t\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    155\u001b[0m         return qutip.Qobj(\n\u001b[1;32m    156\u001b[0m             dense2D_to_fastcsr_fmode(\n",
      "\u001b[0;32m~/Documents/Programming/github/krotov/.venv/py36/lib/python3.6/site-packages/scipy/integrate/_ode.py\u001b[0m in \u001b[0;36mintegrate\u001b[0;34m(self, t, step, relax)\u001b[0m\n\u001b[1;32m    430\u001b[0m             self._y, self.t = mth(self.f, self.jac or (lambda: None),\n\u001b[1;32m    431\u001b[0m                                   \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_y\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 432\u001b[0;31m                                   self.f_params, self.jac_params)\n\u001b[0m\u001b[1;32m    433\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mSystemError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    434\u001b[0m             \u001b[0;31m# f2py issue with tuple returns, see ticket 1187.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/Documents/Programming/github/krotov/.venv/py36/lib/python3.6/site-packages/scipy/integrate/_ode.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, f, jac, y0, t0, t1, f_params, jac_params)\u001b[0m\n\u001b[1;32m    989\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mjac\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mjac_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    990\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minitialized\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 991\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcheck_handle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    992\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    993\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minitialized\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/Documents/Programming/github/krotov/.venv/py36/lib/python3.6/site-packages/scipy/integrate/_ode.py\u001b[0m in \u001b[0;36mcheck_handle\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    789\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mcheck_handle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    790\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandle\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mactive_global_handle\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 791\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mIntegratorConcurrencyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    792\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    793\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhas_jac\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIntegratorConcurrencyError\u001b[0m: Integrator `zvode` can be used to solve only a single problem at a time. If you want to integrate multiple problems, consider using a different integrator (see `ode.set_integrator`)"
     ]
    }
   ],
   "source": [
    "# NBVAL_SKIP\n",
    "oct_result = krotov.optimize_pulses(\n",
    "    objectives,\n",
    "    pulse_options,\n",
    "    tlist,\n",
    "    propagator=propagator,\n",
    "    chi_constructor=krotov.functionals.chis_hs,\n",
    "    info_hook=print_error,\n",
    "    iter_stop=5,\n",
    "    #parallel_map=(\n",
    "    #    qutip.parallel_map,\n",
    "    #    qutip.parallel_map,\n",
    "    #    krotov.parallelization.parallel_map_fw_prop_step,\n",
    "    #),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimization result"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "opt = oct_result.optimized_objectives[0]"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "optdyn00 = opt.propagate(tlist, propagator=propagator, rho0=rho00, e_ops=[rho00, rho01, rho10, rho11])\n",
    "optdyn01 = opt.propagate(tlist, propagator=propagator, rho0=rho01, e_ops=[rho00, rho01, rho10, rho11])\n",
    "optdyn10 = opt.propagate(tlist, propagator=propagator, rho0=rho10, e_ops=[rho00, rho01, rho10, rho11])\n",
    "optdyn11 = opt.propagate(tlist, propagator=propagator, rho0=rho11, e_ops=[rho00, rho01, rho10, rho11])"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "plot_population_dynamics(optdyn00, optdyn01, optdyn10, optdyn11)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "optimized_control = oct_result.optimized_controls[0] + 1j * oct_result.optimized_controls[1]"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "plot_pulse(np.abs(optimized_control), tlist)"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
