{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Optimization of an X-Gate for a Transmon Qubit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "1"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "qutip       4.3.1\n",
      "numpy       1.15.4\n",
      "scipy       1.1.0\n",
      "matplotlib  3.0.2\n",
      "matplotlib.pylab  1.15.4\n",
      "krotov      0.0.1\n",
      "CPython 3.6.7\n",
      "IPython 7.2.0\n"
     ]
    }
   ],
   "source": [
    "# NBVAL_IGNORE_OUTPUT\n",
    "%load_ext watermark\n",
    "import qutip\n",
    "import numpy as np\n",
    "import scipy\n",
    "import matplotlib\n",
    "import matplotlib.pylab as plt\n",
    "import krotov\n",
    "%watermark -v --iversions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\newcommand{tr}[0]{\\operatorname{tr}}\n",
    "\\newcommand{diag}[0]{\\operatorname{diag}}\n",
    "\\newcommand{abs}[0]{\\operatorname{abs}}\n",
    "\\newcommand{pop}[0]{\\operatorname{pop}}\n",
    "\\newcommand{aux}[0]{\\text{aux}}\n",
    "\\newcommand{opt}[0]{\\text{opt}}\n",
    "\\newcommand{tgt}[0]{\\text{tgt}}\n",
    "\\newcommand{init}[0]{\\text{init}}\n",
    "\\newcommand{lab}[0]{\\text{lab}}\n",
    "\\newcommand{rwa}[0]{\\text{rwa}}\n",
    "\\newcommand{bra}[1]{\\langle#1\\vert}\n",
    "\\newcommand{ket}[1]{\\vert#1\\rangle}\n",
    "\\newcommand{Bra}[1]{\\left\\langle#1\\right\\vert}\n",
    "\\newcommand{Ket}[1]{\\left\\vert#1\\right\\rangle}\n",
    "\\newcommand{Braket}[2]{\\left\\langle #1\\vphantom{#2} \\mid #2\\vphantom{#1}\\right\\rangle}\n",
    "\\newcommand{op}[1]{\\hat{#1}}\n",
    "\\newcommand{Op}[1]{\\hat{#1}}\n",
    "\\newcommand{dd}[0]{\\,\\text{d}}\n",
    "\\newcommand{Liouville}[0]{\\mathcal{L}}\n",
    "\\newcommand{DynMap}[0]{\\mathcal{E}}\n",
    "\\newcommand{identity}[0]{\\mathbf{1}}\n",
    "\\newcommand{Norm}[1]{\\lVert#1\\rVert}\n",
    "\\newcommand{Abs}[1]{\\left\\vert#1\\right\\vert}\n",
    "\\newcommand{avg}[1]{\\langle#1\\rangle}\n",
    "\\newcommand{Avg}[1]{\\left\\langle#1\\right\\rangle}\n",
    "\\newcommand{AbsSq}[1]{\\left\\vert#1\\right\\vert^2}\n",
    "\\newcommand{Re}[0]{\\operatorname{Re}}\n",
    "\\newcommand{Im}[0]{\\operatorname{Im}}$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define the Hamiltonian"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The effective Hamiltonian of a single transmon depends on the capacitive energy $E_C=e^2/2C$ and the Josephson energy $E_J$, an energy due to the Josephson junction working as a nonlinear inductor periodic with the flux $\\Phi$. In the so-called transmon limit the ratio between these two energies lie around $E_J / E_C \\approx 45$. The time-independent Hamiltonian can be described then as\n",
    "\n",
    "\\begin{equation*}\n",
    "\\op{H}_{0} = 4 E_C (\\hat{n}-n_g)^2 - E_J \\cos(\\hat{\\Phi})\n",
    "\\end{equation*}\n",
    "\n",
    "where $\\hat{n}$ is the number operator, which count how many Cooper pairs cross the junction, and $n_g$ being the effective offset charge measured in Cooper pair charge units. The aforementioned equation can be written in a truncated charge basis defined by the number operator $\\op{n} \\ket{n} = n \\ket{n}$ such that\n",
    "\n",
    "\\begin{equation*}\n",
    "\\op{H}_{0} = 4 E_C \\sum_{j=-N} ^N (j-n_g)^2 |j \\rangle \\langle j| - \\frac{E_J}{2} \\sum_{j=-N} ^{N-1} ( |j+1\\rangle\\langle j| + |j\\rangle\\langle j+1|).\n",
    "\\end{equation*}\n",
    "\n",
    "If we apply a potential $V(t)$ to the qubit the complete Hamiltonian is changed to \n",
    "\n",
    "\\begin{equation*}\n",
    "\\op{H} = \\op{H}_{0} + V(t) \\cdot \\op{H}_{1}\n",
    "\\end{equation*}\n",
    "\n",
    "The interaction Hamiltonian $\\op{H}_1$ is then equivalent to the charge operator $\\op{q}$, which in the truncated charge basis can be written as \n",
    "\n",
    "\\begin{equation*}\n",
    "\\op{H}_1 = \\op{q} = \\sum_{j=-N} ^N -2n \\ket{n} \\bra{n}.\n",
    "\\end{equation*}\n",
    "\n",
    "Note that the -2 coefficient is just indicating that the charge carriers here are Cooper pairs, each with a charge of $-2e$. \n",
    "\n",
    "We define the logic states $\\ket{0_l}$ and $\\ket{1_l}$ (not to be confused with the charge states $\\ket{n=0}$ and $\\ket{n=1}$) as the eigenstates of the free Hamiltonian $\\op{H}_0$ with the lowest energy. The problem to solve is find a potential $V_{opt}(t)$ such that after a given final time $T$ can \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "2"
    }
   },
   "outputs": [],
   "source": [
    "def transmon_ham_and_states(Ec=0.386, EjEc=45, nstates=8, ng=0.0, T=10.0, steps=1000):\n",
    "    \"\"\"Transmon Hamiltonian\"\"\"\n",
    "    # Ec       :  capacitive energy\n",
    "    # EjEc     :  ratio Ej / Ec\n",
    "    # nstates  :  defines the maximum and minimum states for the basis. The truncated basis \n",
    "    #             will have a total of 2*nstates + 1 states    \n",
    "    \n",
    "    Ej = EjEc * Ec\n",
    "    n = np.arange(-nstates, nstates+1)\n",
    "    up = np.diag(np.ones(2*nstates),k=-1)\n",
    "    do = up.T\n",
    "    H0 = qutip.Qobj(np.diag(4*Ec*(n - ng)**2) - Ej*(up+do)/2.0)\n",
    "    H1 = qutip.Qobj(-2*np.diag(n))\n",
    "    \n",
    "    eigenvals, eigenvecs = scipy.linalg.eig(H0.full())\n",
    "    ndx = np.argsort(eigenvals.real)\n",
    "    E = eigenvals[ndx].real\n",
    "    V = eigenvecs[:,ndx]\n",
    "    w01 = E[1]-E[0] # Transition energy between states\n",
    "    \n",
    "    psi0 = qutip.Qobj(V[:, 0])\n",
    "    psi1 = qutip.Qobj(V[:, 1])    \n",
    "    \n",
    "    profile = lambda t: np.exp(-40.0*(t/T - 0.5)**2)\n",
    "    eps0 = lambda t, args: 0.5 * profile(t) * np.cos(8*np.pi*w01*t)\n",
    "    return ([H0, [H1, eps0]], psi0, psi1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "3"
    }
   },
   "outputs": [],
   "source": [
    "H, psi0, psi1 = transmon_ham_and_states()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We introduce the projectors $P_i = \\ket{\\psi _i}\\bra{\\psi _i}$ for the logic states $\\ket{\\psi _i} \\in \\{\\ket{0_l}, \\ket{1_l}\\}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "4"
    }
   },
   "outputs": [],
   "source": [
    "proj0 = psi0 * psi0.dag()\n",
    "proj1 = psi1 * psi1.dag()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimization target"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We choose our X-gate to be defined during a time interval starting at $t_{0} = 0$ and ending at $T = 10$, with a total of $nt = 1000$ time steps. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "5"
    }
   },
   "outputs": [],
   "source": [
    "tlist = np.linspace(0, 10, 1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We make use of the $\\sigma _{x}$ operator included in QuTiP to define our objective:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "11"
    }
   },
   "outputs": [],
   "source": [
    "objectives = krotov.gate_objectives(\n",
    "    basis_states=[psi0, psi1], gate=qutip.operators.sigmax(), H=H)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We define the desired shape of the pulse and the update factor $\\lambda _a$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "16"
    }
   },
   "outputs": [],
   "source": [
    "def S(t):\n",
    "    \"\"\"Shape function for the pulse update\"\"\"\n",
    "    dt = tlist[1] - tlist[0]\n",
    "    steps = len(tlist)\n",
    "    return np.exp(-40.0*(t/((steps-1)*dt)-0.5)**2)\n",
    "\n",
    "pulse_options = {\n",
    "    H[1][1]: krotov.PulseOptions(lambda_a=1, shape=S)\n",
    "}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It may be useful to check the fidelity after each iteration. To achieve this, we define a simple function that will be used by the main routine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_fidelity(**args): \n",
    "    F_re = np.average(np.array(args['tau_vals']).real)\n",
    "    print(\"Iteration %d: \\tF = %f\" % (args['iteration'], F_re))\n",
    "    return F_re"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulate dynamics of the guess pulse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "17"
    }
   },
   "outputs": [],
   "source": [
    "def plot_pulse(pulse, tlist):\n",
    "    fig, ax = plt.subplots()\n",
    "    if callable(pulse):\n",
    "        pulse = np.array([pulse(t, None) for t in tlist])\n",
    "    ax.plot(tlist, pulse)\n",
    "    ax.set_xlabel('time')\n",
    "    ax.set_ylabel('pulse amplitude')\n",
    "    plt.show(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "18"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_pulse(H[1][1], tlist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once we are sure to have obtained the desired guess pulse, the dynamics for the initial guess can be found easily"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "19"
    }
   },
   "outputs": [],
   "source": [
    "guess_dynamics = [objectives[x].mesolve(tlist, e_ops=[proj0, proj1]) for x in [0,1]]\n",
    "# using initial state psi0 = objectives[0].initial_state"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "20"
    }
   },
   "outputs": [],
   "source": [
    "def plot_population(result):\n",
    "    fig, ax = plt.subplots()\n",
    "    ax.plot(result.times, result.expect[0], label='0')\n",
    "    ax.plot(result.times, result.expect[1], label='1')\n",
    "    ax.legend()\n",
    "    ax.set_xlabel('time')\n",
    "    ax.set_ylabel('population')\n",
    "    plt.show(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "21"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_population(guess_dynamics[0])\n",
    "plot_population(guess_dynamics[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is obvioius that our initial guess is not even near the pulse that we are trying to achieve. However we will still use it and try to see what results that we can obtain. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimize"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now use all the information that we have gathered to initialize\n",
    "the optimization routine. That is: \n",
    "\n",
    "* The `objectives`: creating an X-gate in the given basis. \n",
    "\n",
    "* The `pulse_options`: initial pulses and their shapes restrictions. \n",
    "\n",
    "* The `tlist`: time grid used for the propagation. \n",
    "\n",
    "* The `propagator`: propagation method that will be used.\n",
    "\n",
    "* The `chi_constructor`: the optimization functional to use. \n",
    "\n",
    "* The `info_hook`: the subroutines to be called and data to be analized inbetween iterations.\n",
    "\n",
    "* The `iter_stop`: the number of iterations to perform the optimization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "23"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration 0: \tF = -0.000000\n",
      "Iteration 1: \tF = 0.107476\n",
      "Iteration 2: \tF = 0.410731\n",
      "Iteration 3: \tF = 0.694585\n",
      "Iteration 4: \tF = 0.757263\n",
      "Iteration 5: \tF = 0.773342\n",
      "Iteration 6: \tF = 0.785125\n",
      "Iteration 7: \tF = 0.794793\n",
      "Iteration 8: \tF = 0.802604\n",
      "Iteration 9: \tF = 0.808889\n",
      "Iteration 10: \tF = 0.813965\n",
      "Iteration 11: \tF = 0.818103\n",
      "Iteration 12: \tF = 0.821519\n",
      "Iteration 13: \tF = 0.824384\n",
      "Iteration 14: \tF = 0.826826\n",
      "Iteration 15: \tF = 0.828944\n",
      "Iteration 16: \tF = 0.830808\n",
      "Iteration 17: \tF = 0.832474\n",
      "Iteration 18: \tF = 0.833983\n",
      "Iteration 19: \tF = 0.835364\n",
      "Iteration 20: \tF = 0.836644\n"
     ]
    }
   ],
   "source": [
    "oct_result = krotov.optimize_pulses(\n",
    "    objectives, pulse_options, tlist,\n",
    "    propagator=krotov.propagators.expm,\n",
    "    chi_constructor=krotov.functionals.chis_re,\n",
    "    info_hook=print_fidelity, iter_stop=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulate dynamics of the optimized pulse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We want to see how much the results have improved after the optimization. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "27"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_pulse(oct_result.optimized_controls[0], tlist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "28"
    }
   },
   "outputs": [],
   "source": [
    "opt_dynamics = [oct_result.optimized_objectives[x].mesolve(\n",
    "    tlist, e_ops=[proj0, proj1]) for x in [0,1]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "opt_states = [oct_result.optimized_objectives[x].mesolve(tlist) for x in [0,1]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "29"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_population(opt_dynamics[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_population(opt_dynamics[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this case we do not only care about the expected value for the states, but since we want to implement a gate it is necessary to check whether we are performing a coherent control. We are then interested in the phase difference that we obtain after propagating the states from the logic basis.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_gate(result):\n",
    "    \n",
    "    num = len(result[0].states)\n",
    "    overlap_0 = np.vectorize(lambda i: np.angle(result[0].states[i].overlap(psi1)))\n",
    "    overlap_1 = np.vectorize(lambda i: np.angle(result[1].states[i].overlap(psi0)))\n",
    "    \n",
    "    rel_phase = (overlap_0(np.arange(num))- overlap_1(np.arange(num)))%(2*np.pi)\n",
    "        \n",
    "    fig, ax = plt.subplots()\n",
    "    ax.plot(result[0].times, rel_phase/np.pi)\n",
    "    ax.set_xlabel('time')\n",
    "    ax.set_ylabel('relative phase (π)')\n",
    "    plt.show(fig)\n",
    "    print('Final relative phase = %.2e' % rel_phase[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final relative phase = 7.06e-02\n"
     ]
    }
   ],
   "source": [
    "plot_gate(opt_states)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We may also propagate the optimization result using the same propagator that was\n",
    "used in the optimization (instead of `qutip.mesolve`). The main difference\n",
    "between the two propagations is that `mesolve` assumes piecewise constant pulses\n",
    "that switch between two points in `tlist`, whereas `propagate` assumes that\n",
    "pulses are constant on the intervals of `tlist`, and thus switches *on* the\n",
    "points in `tlist`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "30"
    }
   },
   "outputs": [],
   "source": [
    "opt_dynamics2 = [oct_result.optimized_objectives[x].propagate(\n",
    "    tlist, e_ops=[proj0, proj1], propagator=krotov.propagators.expm) for x in [0,1]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The difference between the two propagations gives an indication of the \"time\n",
    "discretization error\". If this error were unacceptably large, we would need a\n",
    "smaller time step."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "attributes": {
     "classes": [],
     "id": "",
     "n": "31"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1.40e-04'"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"%.2e\" % abs(opt_dynamics2[0].expect[1][-1] - opt_dynamics[0].expect[1][-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
