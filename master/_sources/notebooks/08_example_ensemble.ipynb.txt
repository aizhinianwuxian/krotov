{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ensemble Optimization for Robust Pulses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:49:11.377967Z",
     "start_time": "2019-12-14T05:49:09.557264Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "1"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "numpy            1.17.2\n",
      "matplotlib.pylab 1.17.2\n",
      "krotov           1.0.0-dev\n",
      "qutip            4.4.1\n",
      "scipy            1.3.1\n",
      "matplotlib       3.1.2\n",
      "CPython 3.7.3\n",
      "IPython 7.10.1\n"
     ]
    }
   ],
   "source": [
    "# NBVAL_IGNORE_OUTPUT\n",
    "%load_ext watermark\n",
    "import os\n",
    "import qutip\n",
    "import numpy as np\n",
    "import scipy\n",
    "import matplotlib\n",
    "import matplotlib.pylab as plt\n",
    "import krotov\n",
    "from qutip import Qobj\n",
    "import pickle\n",
    "\n",
    "%watermark -v --iversions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\newcommand{tr}[0]{\\operatorname{tr}}\n",
    "\\newcommand{diag}[0]{\\operatorname{diag}}\n",
    "\\newcommand{abs}[0]{\\operatorname{abs}}\n",
    "\\newcommand{pop}[0]{\\operatorname{pop}}\n",
    "\\newcommand{aux}[0]{\\text{aux}}\n",
    "\\newcommand{opt}[0]{\\text{opt}}\n",
    "\\newcommand{tgt}[0]{\\text{tgt}}\n",
    "\\newcommand{init}[0]{\\text{init}}\n",
    "\\newcommand{lab}[0]{\\text{lab}}\n",
    "\\newcommand{rwa}[0]{\\text{rwa}}\n",
    "\\newcommand{bra}[1]{\\langle#1\\vert}\n",
    "\\newcommand{ket}[1]{\\vert#1\\rangle}\n",
    "\\newcommand{Bra}[1]{\\left\\langle#1\\right\\vert}\n",
    "\\newcommand{Ket}[1]{\\left\\vert#1\\right\\rangle}\n",
    "\\newcommand{Braket}[2]{\\left\\langle #1\\vphantom{#2}\\mid{#2}\\vphantom{#1}\\right\\rangle}\n",
    "\\newcommand{ketbra}[2]{\\vert#1\\rangle\\!\\langle#2\\vert}\n",
    "\\newcommand{op}[1]{\\hat{#1}}\n",
    "\\newcommand{Op}[1]{\\hat{#1}}\n",
    "\\newcommand{dd}[0]{\\,\\text{d}}\n",
    "\\newcommand{Liouville}[0]{\\mathcal{L}}\n",
    "\\newcommand{DynMap}[0]{\\mathcal{E}}\n",
    "\\newcommand{identity}[0]{\\mathbf{1}}\n",
    "\\newcommand{Norm}[1]{\\lVert#1\\rVert}\n",
    "\\newcommand{Abs}[1]{\\left\\vert#1\\right\\vert}\n",
    "\\newcommand{avg}[1]{\\langle#1\\rangle}\n",
    "\\newcommand{Avg}[1]{\\left\\langle#1\\right\\rangle}\n",
    "\\newcommand{AbsSq}[1]{\\left\\vert#1\\right\\vert^2}\n",
    "\\newcommand{Re}[0]{\\operatorname{Re}}\n",
    "\\newcommand{Im}[0]{\\operatorname{Im}}\n",
    "\\newcommand{toP}[0]{\\omega_{12}}\n",
    "\\newcommand{toS}[0]{\\omega_{23}}$\n",
    "\n",
    "This example revisits the [Optimization of a State-to-State Transfer in a\n",
    "Lambda System in the RWA](02_example_lambda_system_rwa_complex_pulse.ipynb),\n",
    "attempting to make the control pulses robustness with respect to variations in\n",
    "the pulse amplitude, through \"ensemble optimization\"."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note**: This notebook uses some parallelization features (`qutip.parallel_map`/`multiprocessing.Pool`). Unfortunately, on Windows, `multiprocessing.Pool` does not work correctly for functions defined in a Jupyter notebook (due to the [`spawn` method](https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods) being used on Windows, instead of Unix-`fork`, see also https://stackoverflow.com/questions/45719956). We therefore replace `parallel_map` with `serial_map` when running on Windows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:49:12.834183Z",
     "start_time": "2019-12-14T05:49:12.830302Z"
    }
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "if sys.platform == 'win32':\n",
    "    from qutip import serial_map as parallel_map\n",
    "else:\n",
    "    from qutip import parallel_map"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Control objectives for population transfer in the Lambda system\n",
    "\n",
    "As in the original example, we define the Hamiltonian for a Lambda system in\n",
    "the rotating wave approximation, like this:\n",
    "\n",
    "![Lambda system considered in this notebook](energylevels.png)\n",
    "\n",
    "We set up the control fields and the Hamiltonian exactly as before:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:49:14.679110Z",
     "start_time": "2019-12-14T05:49:14.669011Z"
    }
   },
   "outputs": [],
   "source": [
    "def Omega_P1(t, args):\n",
    "    \"\"\"Guess for the real part of the pump pulse\"\"\"\n",
    "    Ω0 = 5.0\n",
    "    return Ω0 * krotov.shapes.blackman(t, t_start=2.0, t_stop=5.0)\n",
    "\n",
    "\n",
    "def Omega_P2(t, args):\n",
    "    \"\"\"Guess for the imaginary part of the pump pulse\"\"\"\n",
    "    return 0.0\n",
    "\n",
    "\n",
    "def Omega_S1(t, args):\n",
    "    \"\"\"Guess for the real part of the Stokes pulse\"\"\"\n",
    "    Ω0 = 5.0\n",
    "    return Ω0 * krotov.shapes.blackman(t, t_start=0.0, t_stop=3.0)\n",
    "\n",
    "\n",
    "def Omega_S2(t, args):\n",
    "    \"\"\"Guess for the imaginary part of the Stokes pulse\"\"\"\n",
    "    return 0.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:49:15.546668Z",
     "start_time": "2019-12-14T05:49:15.542978Z"
    }
   },
   "outputs": [],
   "source": [
    "tlist = np.linspace(0, 5, 500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:49:16.275487Z",
     "start_time": "2019-12-14T05:49:16.259697Z"
    }
   },
   "outputs": [],
   "source": [
    "def hamiltonian(E1=0.0, E2=10.0, E3=5.0, omega_P=9.5, omega_S=4.5):\n",
    "    \"\"\"Lambda-system Hamiltonian in the RWA\"\"\"\n",
    "\n",
    "    # detunings\n",
    "    ΔP = E1 + omega_P - E2\n",
    "    ΔS = E3 + omega_S - E2\n",
    "\n",
    "    H0 = Qobj([[ΔP, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, ΔS]])\n",
    "\n",
    "    HP_re = -0.5 * Qobj([[0.0, 1.0, 0.0], [1.0, 0.0, 0.0], [0.0, 0.0, 0.0]])\n",
    "    HP_im = -0.5 * Qobj([[0.0, 1.0j, 0.0], [-1.0j, 0.0, 0.0], [0.0, 0.0, 0.0]])\n",
    "\n",
    "    HS_re = -0.5 * Qobj([[0.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0]])\n",
    "    HS_im = -0.5 * Qobj([[0.0, 0.0, 0.0], [0.0, 0.0, 1.0j], [0.0, -1.0j, 0.0]])\n",
    "\n",
    "    return [\n",
    "        H0,\n",
    "        [HP_re, Omega_P1],\n",
    "        [HP_im, Omega_P2],\n",
    "        [HS_re, Omega_S1],\n",
    "        [HS_im, Omega_S2],\n",
    "    ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:49:16.964981Z",
     "start_time": "2019-12-14T05:49:16.955207Z"
    }
   },
   "outputs": [],
   "source": [
    "H = hamiltonian()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The control objective is the realization of a phase sensitive $\\ket{1}\n",
    "\\rightarrow \\ket{3}$ transition in the lab frame. Thus, in the rotating frame,\n",
    "we must take into account an additional phase factor."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:49:18.055282Z",
     "start_time": "2019-12-14T05:49:18.046694Z"
    }
   },
   "outputs": [],
   "source": [
    "ket1 = qutip.Qobj(np.array([1.0, 0.0, 0.0]))\n",
    "ket2 = qutip.Qobj(np.array([0.0, 1.0, 0.0]))\n",
    "ket3 = qutip.Qobj(np.array([0.0, 0.0, 1.0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:49:18.827703Z",
     "start_time": "2019-12-14T05:49:18.823585Z"
    }
   },
   "outputs": [],
   "source": [
    "def rwa_target_state(ket3, E2=10.0, omega_S=4.5, T=5):\n",
    "    return np.exp(1j * (E2 - omega_S) * T) * ket3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:49:19.589850Z",
     "start_time": "2019-12-14T05:49:19.586325Z"
    }
   },
   "outputs": [],
   "source": [
    "psi_target = rwa_target_state(ket3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:49:20.578687Z",
     "start_time": "2019-12-14T05:49:20.562155Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Objective[|Ψ₀(3)⟩ to |Ψ₁(3)⟩ via [H₀[3,3], [H₁[3,3], u₁(t)], [H₂[3,3], u₂(t)], [H₃[3,3], u₃(t)], [H₄[3,3], u₄(t)]]]]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "objective = krotov.Objective(initial_state=ket1, target=psi_target, H=H)\n",
    "objectives = [objective]\n",
    "objectives"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Robustness to amplitude fluctuations\n",
    "\n",
    "A potential source of error is fluctuations in the pulse amplitude between\n",
    "different runs of the experiment. To account for this, the `hamiltonian`\n",
    "function above include a parameter `mu` that scales the pulse amplitudes by the\n",
    "given factor.\n",
    "\n",
    "We can analyze the result of the [Optimization of a State-to-State Transfer in\n",
    "a Lambda System in the RWA](02_example_lambda_system_rwa_complex_pulse.ipynb)\n",
    "with respect to such fluctuations. We load the earlier optimization result from\n",
    "disk, and verify that the optimized controls produce the $\\ket{1} \\rightarrow\n",
    "\\ket{3}$ transition as desired."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:49:22.240834Z",
     "start_time": "2019-12-14T05:49:22.232985Z"
    }
   },
   "outputs": [],
   "source": [
    "opt_result_unperturbed = krotov.result.Result.load(\n",
    "    'lambda_rwa_opt_result.dump', objectives=[objective]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:49:23.185146Z",
     "start_time": "2019-12-14T05:49:23.176892Z"
    }
   },
   "outputs": [],
   "source": [
    "proj1 = qutip.ket2dm(ket1)\n",
    "proj2 = qutip.ket2dm(ket2)\n",
    "proj3 = qutip.ket2dm(ket3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:50:08.012263Z",
     "start_time": "2019-12-14T05:50:07.708235Z"
    }
   },
   "outputs": [],
   "source": [
    "opt_unperturbed_dynamics = (\n",
    "    opt_result_unperturbed\n",
    "    .optimized_objectives[0]\n",
    "    .mesolve(tlist, e_ops=[proj1, proj2, proj3])\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:50:10.576369Z",
     "start_time": "2019-12-14T05:50:10.568684Z"
    }
   },
   "outputs": [],
   "source": [
    "def plot_population(result):\n",
    "    fig, ax = plt.subplots()\n",
    "    ax.plot(result.times, result.expect[0], label='1')\n",
    "    ax.plot(result.times, result.expect[1], label='2')\n",
    "    ax.plot(result.times, result.expect[2], label='3')\n",
    "    ax.legend()\n",
    "    ax.set_xlabel('time')\n",
    "    ax.set_ylabel('population')\n",
    "    plt.show(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:50:12.453120Z",
     "start_time": "2019-12-14T05:50:12.183779Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_population(opt_unperturbed_dynamics)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "Now we can analyze how robust this control is for variations of ±20% of the\n",
    "pulse amplitude. Numerically, this is achieved by scaling the control\n",
    "Hamiltonians with a pre-factor $\\mu$.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:50:14.031493Z",
     "start_time": "2019-12-14T05:50:14.022100Z"
    }
   },
   "outputs": [],
   "source": [
    "def scale_control(H, *, mu):\n",
    "    \"\"\"Scale all control Hamiltonians by `mu`.\"\"\"\n",
    "    H_scaled = []\n",
    "    for spec in H:\n",
    "        if isinstance(spec, list):\n",
    "            H_scaled.append([mu * spec[0], spec[1]])\n",
    "        else:\n",
    "            H_scaled.append(spec)\n",
    "    return H_scaled"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the analysis, we take the following sample of $\\mu$ values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:50:18.110876Z",
     "start_time": "2019-12-14T05:50:18.105961Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "mu_vals = np.linspace(0.75, 1.25, 33)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "We measure the success of the transfer via the \"population error\", i.e., the\n",
    "deviation from 1.0 of the population in state $\\ket{3}$ at final time $T$.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:50:21.634557Z",
     "start_time": "2019-12-14T05:50:21.630004Z"
    }
   },
   "outputs": [],
   "source": [
    "def pop_error(obj, mu):\n",
    "    res = obj.mesolve(tlist, H=scale_control(obj.H, mu=mu), e_ops=[proj3])\n",
    "    return 1 - res.expect[0][-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:50:27.065840Z",
     "start_time": "2019-12-14T05:50:22.911139Z"
    },
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "def _f(mu):\n",
    "    # parallel_map needs a global function\n",
    "    return pop_error(opt_result_unperturbed.optimized_objectives[0], mu=mu)\n",
    "\n",
    "\n",
    "pop_errors_norobust = parallel_map(_f, mu_vals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:50:28.718391Z",
     "start_time": "2019-12-14T05:50:28.709838Z"
    }
   },
   "outputs": [],
   "source": [
    "def plot_robustness(mu_vals, pop_errors, pop_errors0=None):\n",
    "    fig, ax = plt.subplots()\n",
    "    ax.plot(mu_vals, pop_errors, label='1')\n",
    "    if pop_errors0 is not None:\n",
    "        ax.set_prop_cycle(None)  # reset colors\n",
    "        if isinstance(pop_errors0, list):\n",
    "            for (i, pop_errors_prev) in enumerate(pop_errors0):\n",
    "                ax.plot(\n",
    "                    mu_vals, pop_errors_prev, ls='dotted', label=(\"%d\" % (-i))\n",
    "                )\n",
    "        else:\n",
    "            ax.plot(mu_vals, pop_errors0, ls='dotted', label='0')\n",
    "    ax.set_xlabel(\"relative coupling strength\")\n",
    "    ax.set_ylabel(r\"$1 - \\vert \\langle \\Psi \\vert 3 \\rangle \\vert^2$\")\n",
    "    ax.axvspan(0.9, 1.1, alpha=0.25, color='red')\n",
    "    ax.set_yscale('log')\n",
    "    if pop_errors0 is not None:\n",
    "        ax.legend()\n",
    "    plt.show(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:50:30.216493Z",
     "start_time": "2019-12-14T05:50:29.539045Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_robustness(mu_vals, pop_errors_norobust)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The plot shows that as the pulse amplitude deviates from the optimal value, the\n",
    "error rises quickly: our previous optimization result is not robust.\n",
    "\n",
    "The highlighted region of ±10% is our \"region of interest\" within\n",
    "which we would like the control to be robust by applying optimal control."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setting the ensemble objectives"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "They central idea of optimizing for robustness is to take multiple copies of\n",
    "the Hamiltonian, sampling over the space of variations to which would\n",
    "like to be robust, and optimize over the average of this ensemble.\n",
    "\n",
    "Here, we sample 5 values of $\\mu$ (including the unperturbed $\\mu=1$) in the\n",
    "region of interest, $\\mu \\in [0.9, 1.1]$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:50:33.109427Z",
     "start_time": "2019-12-14T05:50:33.104035Z"
    }
   },
   "outputs": [],
   "source": [
    "ensemble_mu = [0.9, 0.95, 1.0, 1.05, 1.1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The corresponding Hamiltonians are"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:50:44.007721Z",
     "start_time": "2019-12-14T05:50:43.998402Z"
    }
   },
   "outputs": [],
   "source": [
    "ham_ensemble = [scale_control(objective.H, mu=mu) for mu in ensemble_mu]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `krotov.objectives.ensemble_objectives` extends the original objective of a\n",
    "single unperturbed state-to-state transition with one additional objective for\n",
    "each ensemble Hamiltonian for $\\mu \\neq 1$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:50:50.980897Z",
     "start_time": "2019-12-14T05:50:50.974481Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Objective[|Ψ₀(3)⟩ to |Ψ₁(3)⟩ via [H₀[3,3], [H₅[3,3], u₁(t)], [H₆[3,3], u₂(t)], [H₇[3,3], u₃(t)], [H₈[3,3], u₄(t)]]],\n",
       " Objective[|Ψ₀(3)⟩ to |Ψ₁(3)⟩ via [H₀[3,3], [H₉[3,3], u₁(t)], [H₁₀[3,3], u₂(t)], [H₁₁[3,3], u₃(t)], [H₁₂[3,3], u₄(t)]]],\n",
       " Objective[|Ψ₀(3)⟩ to |Ψ₁(3)⟩ via [H₀[3,3], [H₁₃[3,3], u₁(t)], [H₁₄[3,3], u₂(t)], [H₁₅[3,3], u₃(t)], [H₁₆[3,3], u₄(t)]]],\n",
       " Objective[|Ψ₀(3)⟩ to |Ψ₁(3)⟩ via [H₀[3,3], [H₁₇[3,3], u₁(t)], [H₁₈[3,3], u₂(t)], [H₁₉[3,3], u₃(t)], [H₂₀[3,3], u₄(t)]]],\n",
       " Objective[|Ψ₀(3)⟩ to |Ψ₁(3)⟩ via [H₀[3,3], [H₂₁[3,3], u₁(t)], [H₂₂[3,3], u₂(t)], [H₂₃[3,3], u₃(t)], [H₂₄[3,3], u₄(t)]]]]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ensemble_objectives = krotov.objectives.ensemble_objectives(\n",
    "    objectives, ham_ensemble, keep_original_objectives=False,\n",
    ")\n",
    "ensemble_objectives"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is important that all five objectives reference the same four control\n",
    "pulses, as is the case here."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimize"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the same update shape $S(t)$ and $\\lambda_a$ value as in the original optimization:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:51:23.885175Z",
     "start_time": "2019-12-14T05:51:23.876872Z"
    }
   },
   "outputs": [],
   "source": [
    "def S(t):\n",
    "    \"\"\"Scales the Krotov methods update of the pulse value at the time t\"\"\"\n",
    "    return krotov.shapes.flattop(t, 0.0, 5, 0.3, func='sinsq')\n",
    "\n",
    "\n",
    "λ = 0.5\n",
    "\n",
    "pulse_options = {\n",
    "    H[1][1]: dict(lambda_a=λ, update_shape=S),\n",
    "    H[2][1]: dict(lambda_a=λ, update_shape=S),\n",
    "    H[3][1]: dict(lambda_a=λ, update_shape=S),\n",
    "    H[4][1]: dict(lambda_a=λ, update_shape=S),\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "It will be interesting to see how the optimization progresses for each\n",
    "individual element of the ensemble. Thus, we write an `info_hook` routine that\n",
    "prints out a tabular overview of $1 - \\Re\\Braket{\\Psi(T)}{3}_{\\Op{H}_i}$ for\n",
    "all $\\Op{H}_i$ in the ensemble, as well as their average (the total functional\n",
    "$J_T$ that is being minimized)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:51:25.779599Z",
     "start_time": "2019-12-14T05:51:25.772744Z"
    }
   },
   "outputs": [],
   "source": [
    "def print_J_T_per_target(**kwargs):\n",
    "    iteration = kwargs['iteration']\n",
    "    N = len(ensemble_mu)\n",
    "    if iteration == 0:\n",
    "        print(\n",
    "            \"iteration \"\n",
    "            + \"%11s \" % \"J_T(avg)\"\n",
    "            + \" \".join([(\"J_T(μ=%.2f)\" % μ) for μ in ensemble_mu])\n",
    "        )\n",
    "    J_T_vals = 1 - kwargs['tau_vals'].real\n",
    "    J_T = np.sum(J_T_vals) / N\n",
    "    print(\n",
    "        (\"%9d \" % iteration)\n",
    "        + (\"%11.2e \" % J_T)\n",
    "        + \" \".join([(\"%11.2e\" % v) for v in J_T_vals])\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll also want to look at the output of ``krotov.info_hooks.print_table``, but\n",
    "in order to keep the output orderly, we will write that information to a file\n",
    "`ensemble_opt.log`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:51:27.018585Z",
     "start_time": "2019-12-14T05:51:27.014247Z"
    }
   },
   "outputs": [],
   "source": [
    "log_fh = open(\"ensemble_opt.log\", \"w\", encoding=\"utf-8\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To speed up the optimization slightly, we parallelize across the five\n",
    "objectives with appropriate `parallel_map` functions.\n",
    "The optimization starts for the same guess pulses as the original [Optimization\n",
    "of a State-to-State Transfer in a Lambda System in the\n",
    "RWA](02_example_lambda_system_rwa_complex_pulse.ipynb). Generally, for a\n",
    "robustness ensemble optimization, this will yield better results than trying to\n",
    "take the optimized pulses for the unperturbed system as a guess.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T05:53:45.039491Z",
     "start_time": "2019-12-14T05:51:36.105666Z"
    },
    "attributes": {
     "classes": [],
     "id": "",
     "n": "16"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iteration    J_T(avg) J_T(μ=0.90) J_T(μ=0.95) J_T(μ=1.00) J_T(μ=1.05) J_T(μ=1.10)\n",
      "        0    1.01e+00    1.01e+00    1.01e+00    1.01e+00    1.01e+00    1.01e+00\n",
      "        1    6.79e-01    6.94e-01    6.83e-01    6.75e-01    6.71e-01    6.71e-01\n",
      "        2    4.14e-01    4.41e-01    4.21e-01    4.07e-01    4.00e-01    4.00e-01\n",
      "        3    2.36e-01    2.68e-01    2.43e-01    2.27e-01    2.20e-01    2.23e-01\n",
      "        4    1.32e-01    1.63e-01    1.37e-01    1.21e-01    1.16e-01    1.22e-01\n",
      "        5    7.46e-02    1.04e-01    7.78e-02    6.29e-02    5.98e-02    6.86e-02\n",
      "        6    4.47e-02    7.13e-02    4.58e-02    3.24e-02    3.13e-02    4.26e-02\n",
      "        7    2.92e-02    5.32e-02    2.88e-02    1.66e-02    1.72e-02    3.04e-02\n",
      "        8    2.14e-02    4.32e-02    1.96e-02    8.59e-03    1.04e-02    2.50e-02\n",
      "        9    1.73e-02    3.74e-02    1.46e-02    4.48e-03    7.25e-03    2.28e-02\n",
      "       10    1.52e-02    3.41e-02    1.19e-02    2.38e-03    5.83e-03    2.21e-02\n",
      "       11    1.42e-02    3.20e-02    1.03e-02    1.29e-03    5.23e-03    2.20e-02\n",
      "       12    1.36e-02    3.07e-02    9.37e-03    7.20e-04    5.00e-03    2.20e-02\n"
     ]
    }
   ],
   "source": [
    "opt_result = krotov.optimize_pulses(\n",
    "    ensemble_objectives,\n",
    "    pulse_options,\n",
    "    tlist,\n",
    "    propagator=krotov.propagators.expm,\n",
    "    chi_constructor=krotov.functionals.chis_re,\n",
    "    info_hook=krotov.info_hooks.chain(\n",
    "        print_J_T_per_target,\n",
    "        krotov.info_hooks.print_table(\n",
    "            J_T=krotov.functionals.J_T_re, out=log_fh\n",
    "        ),\n",
    "    ),\n",
    "    check_convergence=krotov.convergence.Or(\n",
    "        krotov.convergence.value_below(1e-3, name='J_T'),\n",
    "        krotov.convergence.check_monotonic_error,\n",
    "    ),\n",
    "    parallel_map=(\n",
    "        qutip.parallel_map,\n",
    "        qutip.parallel_map,\n",
    "        krotov.parallelization.parallel_map_fw_prop_step,\n",
    "    ),\n",
    "    iter_stop=12,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After twelve iterations (which were sufficient to produce an error $<10^{-3}$\n",
    "in the original optimization), we find the average error over the ensemble to\n",
    "be still above $>10^{-2}$. However, the error for $\\mu = 1$ is only *slightly*\n",
    "larger than in the original optimization; the lack of success is entirely due\n",
    "to the large error for the other elements of the ensemble for $\\mu \\neq 1$.\n",
    "Achieving robustness is hard!\n",
    "\n",
    "We continue the optimization until the *average* error falls below $10^{-3}$:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T06:01:20.311382Z",
     "start_time": "2019-12-14T06:01:20.290179Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iteration    J_T(avg) J_T(μ=0.90) J_T(μ=0.95) J_T(μ=1.00) J_T(μ=1.05) J_T(μ=1.10)\n",
      "        0    1.36e-02    3.07e-02    9.37e-03    7.20e-04    5.00e-03    2.20e-02\n",
      "      ...\n",
      "      670    1.05e-03    2.80e-03    4.83e-04    1.10e-04    5.22e-04    1.34e-03\n",
      "      671    1.05e-03    2.79e-03    4.79e-04    1.10e-04    5.20e-04    1.33e-03\n",
      "      672    1.04e-03    2.77e-03    4.76e-04    1.10e-04    5.17e-04    1.33e-03\n",
      "      673    1.03e-03    2.76e-03    4.73e-04    1.11e-04    5.14e-04    1.32e-03\n",
      "      674    1.03e-03    2.74e-03    4.70e-04    1.11e-04    5.11e-04    1.31e-03\n",
      "      675    1.02e-03    2.72e-03    4.66e-04    1.11e-04    5.08e-04    1.30e-03\n",
      "      676    1.02e-03    2.71e-03    4.63e-04    1.12e-04    5.06e-04    1.29e-03\n",
      "      677    1.01e-03    2.69e-03    4.60e-04    1.12e-04    5.03e-04    1.28e-03\n",
      "      678    1.00e-03    2.68e-03    4.57e-04    1.12e-04    5.00e-04    1.27e-03\n",
      "      679    9.99e-04    2.67e-03    4.54e-04    1.13e-04    4.98e-04    1.27e-03\n"
     ]
    }
   ],
   "source": [
    "dumpfile = \"./ensemble_opt_result.dump\"\n",
    "if os.path.isfile(dumpfile):\n",
    "    opt_result = krotov.result.Result.load(dumpfile, objectives)\n",
    "    print_J_T_per_target(iteration=0, tau_vals=opt_result.tau_vals[12])\n",
    "    print(\"      ...\")\n",
    "    n_iters = len(opt_result.tau_vals)\n",
    "    for i in range(n_iters - 10, n_iters):\n",
    "        print_J_T_per_target(iteration=i, tau_vals=opt_result.tau_vals[i])\n",
    "else:\n",
    "    opt_result = krotov.optimize_pulses(\n",
    "        ensemble_objectives,\n",
    "        pulse_options,\n",
    "        tlist,\n",
    "        propagator=krotov.propagators.expm,\n",
    "        chi_constructor=krotov.functionals.chis_re,\n",
    "        info_hook=krotov.info_hooks.chain(\n",
    "            print_J_T_per_target,\n",
    "            krotov.info_hooks.print_table(\n",
    "                J_T=krotov.functionals.J_T_re, out=log_fh\n",
    "            ),\n",
    "        ),\n",
    "        check_convergence=krotov.convergence.Or(\n",
    "            krotov.convergence.value_below(1e-3, name='J_T'),\n",
    "            krotov.convergence.check_monotonic_error,\n",
    "        ),\n",
    "        parallel_map=(\n",
    "            qutip.parallel_map,\n",
    "            qutip.parallel_map,\n",
    "            krotov.parallelization.parallel_map_fw_prop_step,\n",
    "        ),\n",
    "        iter_stop=1000,\n",
    "        continue_from=opt_result,\n",
    "    )\n",
    "    opt_result.dump(dumpfile)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T06:02:22.051478Z",
     "start_time": "2019-12-14T06:02:22.046279Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Krotov Optimization Result\n",
       "--------------------------\n",
       "- Started at 2019-12-14 07:18:32\n",
       "- Number of objectives: 1\n",
       "- Number of iterations: 679\n",
       "- Reason for termination: Reached convergence: J_T < 0.001\n",
       "- Ended at 2019-12-14 09:49:45 (2:31:13)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opt_result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T06:02:23.942530Z",
     "start_time": "2019-12-14T06:02:23.938827Z"
    }
   },
   "outputs": [],
   "source": [
    "log_fh.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Even now, the ideal Hamiltonian ($\\mu = 1$) has the lowest error in the\n",
    "ensemble by a significant margin. However, notice that the error in the $J_T$\n",
    "for $\\mu = 1$ is actually rising, while the errors for values of $\\mu \\neq 1$\n",
    "are falling by a much larger value! This is a good thing: we sacrifice a little\n",
    "bit of fidelity in the unperturbed dynamics to an increase in robustness.\n",
    "\n",
    "The optimized \"robust\" pulse looks as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T06:02:25.776984Z",
     "start_time": "2019-12-14T06:02:25.145613Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pump pulse amplitude and phase:\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stokes pulse amplitude and phase:\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_pulse_amplitude_and_phase(pulse_real, pulse_imaginary, tlist):\n",
    "    ax1 = plt.subplot(211)\n",
    "    ax2 = plt.subplot(212)\n",
    "    amplitudes = [\n",
    "        np.sqrt(x * x + y * y) for x, y in zip(pulse_real, pulse_imaginary)\n",
    "    ]\n",
    "    phases = [\n",
    "        np.arctan2(y, x) / np.pi for x, y in zip(pulse_real, pulse_imaginary)\n",
    "    ]\n",
    "    ax1.plot(tlist, amplitudes)\n",
    "    ax1.set_xlabel('time')\n",
    "    ax1.set_ylabel('pulse amplitude')\n",
    "    ax2.plot(tlist, phases)\n",
    "    ax2.set_xlabel('time')\n",
    "    ax2.set_ylabel('pulse phase (π)')\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "print(\"pump pulse amplitude and phase:\")\n",
    "plot_pulse_amplitude_and_phase(\n",
    "    opt_result.optimized_controls[0], opt_result.optimized_controls[1], tlist\n",
    ")\n",
    "print(\"Stokes pulse amplitude and phase:\")\n",
    "plot_pulse_amplitude_and_phase(\n",
    "    opt_result.optimized_controls[2], opt_result.optimized_controls[3], tlist\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and produces the dynamics (in the unperturbed system) shown below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T06:02:27.101478Z",
     "start_time": "2019-12-14T06:02:26.649700Z"
    }
   },
   "outputs": [],
   "source": [
    "opt_robust_dynamics = opt_result.optimized_objectives[0].mesolve(\n",
    "    tlist, e_ops=[proj1, proj2, proj3]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T06:02:27.951052Z",
     "start_time": "2019-12-14T06:02:27.670061Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_population(opt_robust_dynamics)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Robustness analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When comparing the robustness of the \"robust\" optimized pulse to that obtained\n",
    "from the original optimization for the unperturbed Hamiltonian, we should make\n",
    "sure that we have converged to a comparable error: We would like to avoid the\n",
    "suspicion that the ensemble error is below our threshold only because the error\n",
    "for $\\mu = 1$ is so much lower. Therefore, we continue the original unperturbed\n",
    "optimization for a few more iterations, until we reach the same error $\\approx\n",
    "1.13 \\times 10^{-4}$ that we found as the result of the ensemble optimization,\n",
    "looking at $\\mu=1$ only:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T06:02:29.400377Z",
     "start_time": "2019-12-14T06:02:29.394483Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "J_T(μ=1) = 2.67e-03\n"
     ]
    }
   ],
   "source": [
    "print(\"J_T(μ=1) = %.2e\" % (1 - opt_result.tau_vals[-1][0].real))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T06:02:46.099512Z",
     "start_time": "2019-12-14T06:02:36.036826Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iter.      J_T  ∫gₐ(ϵ₁)dt  ∫gₐ(ϵ₂)dt  ∫gₐ(ϵ₃)dt  ∫gₐ(ϵ₄)dt   ∑∫gₐ(t)dt          J       ΔJ_T         ΔJ  secs\n",
      "0     5.91e-04   0.00e+00   0.00e+00   0.00e+00   0.00e+00    0.00e+00   5.91e-04        n/a        n/a     1\n",
      "13    3.25e-04   1.26e-04   1.98e-05   1.02e-04   1.84e-05    2.66e-04   5.90e-04  -2.66e-04  -3.54e-07     3\n",
      "14    1.83e-04   6.32e-05   1.41e-05   5.12e-05   1.29e-05    1.41e-04   3.24e-04  -1.42e-04  -2.11e-07     3\n",
      "15    1.06e-04   3.19e-05   1.00e-05   2.59e-05   9.11e-06    7.69e-05   1.83e-04  -7.70e-05  -1.27e-07     3\n"
     ]
    }
   ],
   "source": [
    "opt_result_unperturbed_cont = krotov.optimize_pulses(\n",
    "    [objective],\n",
    "    pulse_options,\n",
    "    tlist,\n",
    "    propagator=krotov.propagators.expm,\n",
    "    chi_constructor=krotov.functionals.chis_re,\n",
    "    info_hook=krotov.info_hooks.print_table(\n",
    "        J_T=krotov.functionals.J_T_re,\n",
    "        show_g_a_int_per_pulse=True,\n",
    "    ),\n",
    "    check_convergence=krotov.convergence.Or(\n",
    "        krotov.convergence.value_below(1.13e-4, name='J_T'),\n",
    "        krotov.convergence.check_monotonic_error,\n",
    "    ),\n",
    "    iter_stop=50,\n",
    "    continue_from=opt_result_unperturbed,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we can compare the robustness of the optimized pulses from the original\n",
    "unperturbed optimization (label \"-1\"), the continued unperturbed optimization\n",
    "(label \"0\"), and the ensemble optimization (label \"1\"):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T06:02:58.115407Z",
     "start_time": "2019-12-14T06:02:51.842941Z"
    }
   },
   "outputs": [],
   "source": [
    "def _f(mu):\n",
    "    return pop_error(\n",
    "        opt_result_unperturbed_cont.optimized_objectives[0], mu=mu\n",
    "    )\n",
    "\n",
    "\n",
    "pop_errors_norobust_cont = parallel_map(_f, mu_vals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T06:03:08.337832Z",
     "start_time": "2019-12-14T06:02:58.207463Z"
    }
   },
   "outputs": [],
   "source": [
    "def _f(mu):\n",
    "    return pop_error(opt_result.optimized_objectives[0], mu=mu)\n",
    "\n",
    "\n",
    "pop_errors_robust = parallel_map(_f, mu_vals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-12-14T06:03:09.230807Z",
     "start_time": "2019-12-14T06:03:08.438929Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_robustness(\n",
    "    mu_vals,\n",
    "    pop_errors_robust,\n",
    "    pop_errors0=[pop_errors_norobust_cont, pop_errors_norobust],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that without the ensemble optimization, we only lower the error for\n",
    "exactly $\\mu = 1$: the more we converge, the less robust the result. In\n",
    "contrast, the ensemble optimization results in considerably lower errors (order\n",
    "of magnitude!) throughout the highlighted \"region of interest\" and beyond."
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "jupytext": {
   "formats": ""
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
